<mutations>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="21"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>30</index><block>8</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>51</index><block>12</block><killingTest>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double division with multiplication</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>61</index><block>13</block><killingTest>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>62</index><block>13</block><killingTest>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double addition with subtraction</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>64</index><block>14</block><killingTest>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="2"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>87</index><block>18</block><killingTest>org.apache.commons.math.complex.ComplexTest.testSqrtPolar(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double division with multiplication</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>97</index><block>19</block><killingTest>org.apache.commons.math.complex.ComplexTest.testSqrtImaginaryZero(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="2"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>98</index><block>19</block><killingTest>org.apache.commons.math.complex.ComplexTest.testSqrtPolar(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double addition with subtraction</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="2"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>100</index><block>20</block><killingTest>org.apache.commons.math.complex.ComplexTest.testSqrtPolar(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="2"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>92</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTest>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><block>4</block><killingTest>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="21"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>30</index><block>8</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>37</index><block>9</block><killingTest>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>73</index><block>15</block><killingTest>org.apache.commons.math.complex.ComplexTest.testLogZero(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>9</index><block>2</block><killingTest>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/complex/Complex::abs</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>19</index><block>5</block><killingTest>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/complex/Complex::abs</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>43</index><block>11</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/complex/Complex::abs</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>65</index><block>14</block><killingTest>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/complex/Complex::abs</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="6"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>79</index><block>17</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/complex/Complex::abs</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>101</index><block>20</block><killingTest>org.apache.commons.math.complex.ComplexTest.testSqrtImaginaryZero(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/complex/Complex::abs</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="3"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>acos</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>425</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTest>org.apache.commons.math.complex.ComplexTest.testAcos(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>acos</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>426</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>9</index><block>2</block><killingTest>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::acos</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>acos</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>429</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>23</index><block>9</block><killingTest>org.apache.commons.math.complex.ComplexTest.testAcosInf(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::acos</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>8</index><block>1</block><killingTest>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double addition with subtraction</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>13</index><block>2</block><killingTest>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double addition with subtraction</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>15</index><block>3</block><killingTest>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::add</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="3"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>asin</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>448</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTest>org.apache.commons.math.complex.ComplexTest.testAsin(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>asin</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>449</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>9</index><block>2</block><killingTest>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::asin</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>asin</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>452</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>23</index><block>9</block><killingTest>org.apache.commons.math.complex.ComplexTest.testAsinInf(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::asin</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="3"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>atan</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>471</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTest>org.apache.commons.math.complex.ComplexTest.testAtan(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>atan</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>472</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>9</index><block>2</block><killingTest>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::atan</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>atan</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>475</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>28</index><block>10</block><killingTest>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::atan</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>conjugate</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>155</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>18</index><block>3</block><killingTest>org.apache.commons.math.complex.ComplexTest.testConjugate(org.apache.commons.math.complex.ComplexTest)</killingTest><description>removed negation</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>conjugate</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>152</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTest>org.apache.commons.math.complex.ComplexTest.testConjugate(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>conjugate</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>9</index><block>2</block><killingTest>org.apache.commons.math.complex.ComplexTest.testConjugateNaN(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::conjugate</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>conjugate</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>155</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>20</index><block>4</block><killingTest>org.apache.commons.math.complex.ComplexTest.testConjugate(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::conjugate</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>510</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>24</index><block>6</block><killingTest>org.apache.commons.math.complex.ComplexTest.testCos(org.apache.commons.math.complex.ComplexTest)</killingTest><description>removed negation</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>510</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>20</index><block>5</block><killingTest>org.apache.commons.math.complex.ComplexTest.testCos(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>510</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>28</index><block>7</block><killingTest>org.apache.commons.math.complex.ComplexTest.testCos(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="2"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>506</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTest>org.apache.commons.math.complex.ComplexTest.testCos(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>507</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>9</index><block>2</block><killingTest>org.apache.commons.math.complex.ComplexTest.testCosNaN(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::cos</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>510</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>30</index><block>8</block><killingTest>org.apache.commons.math.complex.ComplexTest.testCos(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::cos</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>cosh</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>544</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>20</index><block>5</block><killingTest>org.apache.commons.math.complex.ComplexTest.testCosh(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>cosh</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>544</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>27</index><block>7</block><killingTest>org.apache.commons.math.complex.ComplexTest.testCosh(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="2"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>cosh</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>540</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTest>org.apache.commons.math.complex.ComplexTest.testCosh(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>cosh</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>541</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>9</index><block>2</block><killingTest>org.apache.commons.math.complex.ComplexTest.testCoshNaN(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::cosh</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>cosh</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>544</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>29</index><block>8</block><killingTest>org.apache.commons.math.complex.ComplexTest.testCosh(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::cosh</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>createComplex</mutatedMethod><methodDescription>(DD)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>872</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>8</index><block>1</block><killingTest>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::createComplex</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="10"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>60</index><block>17</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>218</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>134</index><block>24</block><killingTest /><description>removed negation</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>210</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>73</index><block>19</block><killingTest /><description>Replaced double division with multiplication</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>210</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>77</index><block>19</block><killingTest /><description>Replaced double division with multiplication</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>212</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>85</index><block>21</block><killingTest>org.apache.commons.math.complex.ComplexTest.testDivide(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double division with multiplication</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>213</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>91</index><block>21</block><killingTest>org.apache.commons.math.complex.ComplexTest.testDivide(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>213</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>93</index><block>21</block><killingTest>org.apache.commons.math.complex.ComplexTest.testDivide(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double addition with subtraction</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>214</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>101</index><block>21</block><killingTest>org.apache.commons.math.complex.ComplexTest.testDivide(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>214</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>104</index><block>21</block><killingTest>org.apache.commons.math.complex.ComplexTest.testDivide(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double addition with subtraction</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>214</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>106</index><block>21</block><killingTest>org.apache.commons.math.complex.ComplexTest.testDivide(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double division with multiplication</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>214</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>110</index><block>21</block><killingTest>org.apache.commons.math.complex.ComplexTest.testDivide(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>214</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>113</index><block>21</block><killingTest>org.apache.commons.math.complex.ComplexTest.testDivide(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double subtraction with addition</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>214</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>115</index><block>21</block><killingTest>org.apache.commons.math.complex.ComplexTest.testDivide(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double division with multiplication</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>218</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>131</index><block>24</block><killingTest /><description>Replaced double division with multiplication</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>218</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>136</index><block>24</block><killingTest /><description>Replaced double division with multiplication</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="4"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>220</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>144</index><block>26</block><killingTest>org.apache.commons.math.complex.ComplexTest.testAtan(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double division with multiplication</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>221</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>150</index><block>26</block><killingTest>org.apache.commons.math.complex.ComplexTest.testDivideNaNInf(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>221</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>152</index><block>26</block><killingTest>org.apache.commons.math.complex.ComplexTest.testDivideNaNInf(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double addition with subtraction</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>222</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>160</index><block>26</block><killingTest>org.apache.commons.math.complex.ComplexTest.testDivideNaNInf(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="4"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>222</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>163</index><block>26</block><killingTest>org.apache.commons.math.complex.ComplexTest.testAtan(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double addition with subtraction</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="4"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>222</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>165</index><block>26</block><killingTest>org.apache.commons.math.complex.ComplexTest.testAtan(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double division with multiplication</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>222</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>171</index><block>26</block><killingTest>org.apache.commons.math.complex.ComplexTest.testDivideNaNInf(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="4"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>222</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>172</index><block>26</block><killingTest>org.apache.commons.math.complex.ComplexTest.testAtan(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double subtraction with addition</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="4"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>222</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>174</index><block>26</block><killingTest>org.apache.commons.math.complex.ComplexTest.testAtan(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double division with multiplication</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>194</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTest>org.apache.commons.math.complex.ComplexTest.testDivide(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>194</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><block>3</block><killingTest>org.apache.commons.math.complex.ComplexTest.testDivide(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="2"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>200</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>30</index><block>7</block><killingTest>org.apache.commons.math.complex.ComplexTest.testDivideNaNInf(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="2"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>200</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>34</index><block>8</block><killingTest>org.apache.commons.math.analysis.LaguerreSolverTest.testQuinticFunction2(org.apache.commons.math.analysis.LaguerreSolverTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>204</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>44</index><block>11</block><killingTest>org.apache.commons.math.complex.ComplexTest.testDivide(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>204</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>47</index><block>13</block><killingTest>org.apache.commons.math.complex.ComplexTest.testDivideInfinite(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="2"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>60</index><block>17</block><killingTest>org.apache.commons.math.complex.ComplexTest.testDivideNaNInf(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>209</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>66</index><block>18</block><killingTest>org.apache.commons.math.complex.ComplexTest.testDivide(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>217</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>124</index><block>23</block><killingTest>org.apache.commons.math.complex.ComplexTest.testDivideNaNInf(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>195</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>13</index><block>4</block><killingTest>org.apache.commons.math.complex.ComplexTest.testDivideNaNInf(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::divide</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>201</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>38</index><block>9</block><killingTest>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::divide</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>205</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>51</index><block>14</block><killingTest>org.apache.commons.math.complex.ComplexTest.testDivideInfinite(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::divide</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>210</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>79</index><block>20</block><killingTest /><description>replaced return value with null for org/apache/commons/math/complex/Complex::divide</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>214</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>117</index><block>22</block><killingTest>org.apache.commons.math.complex.ComplexTest.testDivide(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::divide</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>218</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>138</index><block>25</block><killingTest /><description>replaced return value with null for org/apache/commons/math/complex/Complex::divide</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>222</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>176</index><block>27</block><killingTest>org.apache.commons.math.complex.ComplexTest.testDivideNaNInf(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::divide</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>248</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>0</block><killingTest>org.apache.commons.math.complex.ComplexTest.testEqualsClass(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="2"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>250</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><block>2</block><killingTest>org.apache.commons.math.complex.ComplexTest.testEqualsNull(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>255</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>33</index><block>5</block><killingTest>org.apache.commons.math.complex.ComplexTest.testEqualsNaN(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>258</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>49</index><block>8</block><killingTest>org.apache.commons.math.complex.ComplexTest.testEqualsRealDifference(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>258</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>55</index><block>9</block><killingTest>org.apache.commons.math.complex.ComplexTest.testEqualsTrue(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="3"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>266</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.BooleanFalseReturnValsMutator</mutator><index>80</index><block>15</block><killingTest>org.apache.commons.math.complex.ComplexTest.testEqualsSame(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced boolean return with false for org/apache/commons/math/complex/Complex::equals</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>266</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.BooleanTrueReturnValsMutator</mutator><index>80</index><block>15</block><killingTest>org.apache.commons.math.complex.ComplexTest.testEqualsClass(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced boolean return with true for org/apache/commons/math/complex/Complex::equals</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="2"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>exp</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>580</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>24</index><block>5</block><killingTest>org.apache.commons.math.complex.ComplexTest.testExp(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="2"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>exp</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>580</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>29</index><block>6</block><killingTest>org.apache.commons.math.complex.ComplexTest.testExp(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="2"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>exp</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>575</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTest>org.apache.commons.math.complex.ComplexTest.testExpInf(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>exp</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>576</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>9</index><block>2</block><killingTest>org.apache.commons.math.complex.ComplexTest.testExpNaN(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::exp</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>exp</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>580</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>31</index><block>7</block><killingTest>org.apache.commons.math.complex.ComplexTest.testExpInf(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::exp</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getImaginary</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>5</index><block>0</block><killingTest>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/complex/Complex::getImaginary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getReal</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>299</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>5</index><block>0</block><killingTest>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/complex/Complex::getReal</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>280</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>18</index><block>4</block><killingTest>org.apache.commons.math.complex.ComplexTest.testHashCode(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced integer multiplication with division</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>280</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>22</index><block>5</block><killingTest /><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>280</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>23</index><block>5</block><killingTest>org.apache.commons.math.complex.ComplexTest.testHashCode(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced integer multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>277</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTest>org.apache.commons.math.complex.ComplexTest.testHashCode(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>278</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>9</index><block>2</block><killingTest /><description>replaced int return with 0 for org/apache/commons/math/complex/Complex::hashCode</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>280</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>24</index><block>5</block><killingTest>org.apache.commons.math.complex.ComplexTest.testHashCode(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced int return with 0 for org/apache/commons/math/complex/Complex::hashCode</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="3"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>isInfinite</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>323</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTest>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>isInfinite</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>323</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><block>3</block><killingTest>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>isInfinite</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>323</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><block>5</block><killingTest>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>isInfinite</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>323</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.BooleanTrueReturnValsMutator</mutator><index>23</index><block>8</block><killingTest>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced boolean return with true for org/apache/commons/math/complex/Complex::isInfinite</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="3"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>isNaN</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>310</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>1</block><killingTest>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>isNaN</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>310</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><block>3</block><killingTest>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="3"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>isNaN</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>310</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.BooleanTrueReturnValsMutator</mutator><index>20</index><block>6</block><killingTest>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced boolean return with true for org/apache/commons/math/complex/Complex::isNaN</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="2"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>613</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTest>org.apache.commons.math.complex.ComplexTest.testLogZero(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>614</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>9</index><block>2</block><killingTest>org.apache.commons.math.complex.ComplexTest.testLogNaN(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::log</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>617</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>23</index><block>7</block><killingTest>org.apache.commons.math.complex.ComplexTest.testLogZero(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::log</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="2"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>multiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>363</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>46</index><block>14</block><killingTest>org.apache.commons.math.complex.ComplexTest.testMultiply(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>multiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>363</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>51</index><block>14</block><killingTest>org.apache.commons.math.complex.ComplexTest.testMath221(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="2"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>multiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>363</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>52</index><block>14</block><killingTest>org.apache.commons.math.complex.ComplexTest.testMultiply(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double subtraction with addition</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>multiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>363</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>57</index><block>14</block><killingTest>org.apache.commons.math.complex.ComplexTest.testMath221(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="2"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>multiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>363</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>62</index><block>14</block><killingTest>org.apache.commons.math.complex.ComplexTest.testMultiply(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>multiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>363</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>63</index><block>14</block><killingTest>org.apache.commons.math.complex.ComplexTest.testMath221(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double addition with subtraction</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="2"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>multiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>355</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTest>org.apache.commons.math.complex.ComplexTest.testMath221(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="2"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>multiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>355</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><block>3</block><killingTest>org.apache.commons.math.complex.ComplexTest.testMath221(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>multiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>358</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><block>6</block><killingTest>org.apache.commons.math.complex.ComplexTest.testMath221(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>multiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>358</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>24</index><block>8</block><killingTest>org.apache.commons.math.complex.ComplexTest.testMath221(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>multiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>358</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><block>10</block><killingTest>org.apache.commons.math.complex.ComplexTest.testMath221(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>multiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>358</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>32</index><block>12</block><killingTest>org.apache.commons.math.complex.ComplexTest.testMath221(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>multiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>356</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>13</index><block>4</block><killingTest>org.apache.commons.math.complex.ComplexTest.testMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::multiply</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>multiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>361</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>37</index><block>13</block><killingTest>org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::multiply</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>multiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>363</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>65</index><block>15</block><killingTest>org.apache.commons.math.complex.ComplexTest.testMath221(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::multiply</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>negate</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>380</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>16</index><block>3</block><killingTest>org.apache.commons.math.complex.ComplexTest.testExp(org.apache.commons.math.complex.ComplexTest)</killingTest><description>removed negation</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="2"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>negate</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>380</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>19</index><block>3</block><killingTest>org.apache.commons.math.complex.ComplexTest.testNegate(org.apache.commons.math.complex.ComplexTest)</killingTest><description>removed negation</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="2"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>negate</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>376</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTest>org.apache.commons.math.complex.ComplexTest.testExp(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>negate</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>377</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>9</index><block>2</block><killingTest>org.apache.commons.math.complex.ComplexTest.testNegateNaN(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::negate</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>negate</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>380</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>21</index><block>4</block><killingTest>org.apache.commons.math.complex.ComplexTest.testExp(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::negate</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="2"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>639</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>0</block><killingTest>org.apache.commons.math.complex.ComplexTest.testPowNaNBase(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>642</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>19</index><block>6</block><killingTest>org.apache.commons.math.complex.ComplexTest.testPowNaNBase(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::pow</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>676</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>20</index><block>5</block><killingTest>org.apache.commons.math.complex.ComplexTest.testSin(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>676</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>27</index><block>7</block><killingTest>org.apache.commons.math.complex.ComplexTest.testSin(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>672</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTest>org.apache.commons.math.complex.ComplexTest.testSin(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>673</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>9</index><block>2</block><killingTest>org.apache.commons.math.complex.ComplexTest.testSinNaN(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::sin</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>676</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>29</index><block>8</block><killingTest>org.apache.commons.math.complex.ComplexTest.testSin(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::sin</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="2"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>sinh</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>710</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>20</index><block>5</block><killingTest>org.apache.commons.math.complex.ComplexTest.testSinh(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="2"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>sinh</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>710</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>27</index><block>7</block><killingTest>org.apache.commons.math.complex.ComplexTest.testSinh(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="2"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>sinh</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>706</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTest>org.apache.commons.math.complex.ComplexTest.testSinhInf(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>sinh</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>707</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>9</index><block>2</block><killingTest>org.apache.commons.math.complex.ComplexTest.testSinhNaN(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::sinh</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>sinh</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>710</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>29</index><block>8</block><killingTest>org.apache.commons.math.complex.ComplexTest.testSinhInf(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::sinh</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="15"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>757</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>49</index><block>10</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>756</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>38</index><block>9</block><killingTest>org.apache.commons.math.complex.ComplexTest.testSqrtImaginaryNegative(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double addition with subtraction</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>756</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>40</index><block>9</block><killingTest>org.apache.commons.math.complex.ComplexTest.testSqrtImaginaryNegative(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double division with multiplication</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>758</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>58</index><block>11</block><killingTest>org.apache.commons.math.complex.ComplexTest.testSqrtInf(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>758</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>59</index><block>11</block><killingTest>org.apache.commons.math.complex.ComplexTest.testSqrtInf(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double division with multiplication</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>760</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>71</index><block>14</block><killingTest>org.apache.commons.math.complex.ComplexTest.testSqrtImaginaryNegative(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>760</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>72</index><block>14</block><killingTest>org.apache.commons.math.complex.ComplexTest.testSqrtImaginaryNegative(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double division with multiplication</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>760</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>77</index><block>15</block><killingTest>org.apache.commons.math.complex.ComplexTest.testSqrtImaginaryNegative(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="3"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>748</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTest>org.apache.commons.math.complex.ComplexTest.testSqrtImaginaryNegative(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="4"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>752</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><block>3</block><killingTest>org.apache.commons.math.complex.ComplexTest.testSqrtImaginaryZero(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>752</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>22</index><block>4</block><killingTest>org.apache.commons.math.complex.ComplexTest.testSqrtRealZero(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>757</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>49</index><block>10</block><killingTest>org.apache.commons.math.complex.ComplexTest.testSqrtImaginaryNegative(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>749</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>9</index><block>2</block><killingTest>org.apache.commons.math.complex.ComplexTest.testSqrtNaN(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::sqrt</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>753</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>29</index><block>6</block><killingTest>org.apache.commons.math.analysis.LaguerreSolverTest.testQuinticFunction2(org.apache.commons.math.analysis.LaguerreSolverTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::sqrt</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>758</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>61</index><block>12</block><killingTest>org.apache.commons.math.complex.ComplexTest.testSqrtInf(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::sqrt</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>760</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>79</index><block>16</block><killingTest>org.apache.commons.math.complex.ComplexTest.testSqrtImaginaryNegative(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::sqrt</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>sqrt1z</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>784</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>12</index><block>4</block><killingTest>org.apache.commons.math.complex.ComplexTest.testSqrt1zNaN(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::sqrt1z</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>subtract</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>406</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>22</index><block>6</block><killingTest>org.apache.commons.math.complex.ComplexTest.testSubtract(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double subtraction with addition</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>subtract</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>406</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>27</index><block>7</block><killingTest>org.apache.commons.math.complex.ComplexTest.testSubtract(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double subtraction with addition</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="3"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>subtract</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>402</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTest>org.apache.commons.math.complex.ComplexTest.testSubtract(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="3"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>subtract</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>402</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><block>3</block><killingTest>org.apache.commons.math.complex.ComplexTest.testSubtract(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>subtract</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>403</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>13</index><block>4</block><killingTest>org.apache.commons.math.complex.ComplexTest.testSubtractNaN(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::subtract</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>subtract</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>406</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>29</index><block>8</block><killingTest>org.apache.commons.math.complex.ComplexTest.testSubtract(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::subtract</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>tan</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>818</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>16</index><block>3</block><killingTest>org.apache.commons.math.complex.ComplexTest.testTan(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>tan</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>819</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>23</index><block>3</block><killingTest>org.apache.commons.math.complex.ComplexTest.testTan(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>tan</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>820</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>31</index><block>5</block><killingTest>org.apache.commons.math.complex.ComplexTest.testTan(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double addition with subtraction</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>tan</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>822</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>39</index><block>6</block><killingTest>org.apache.commons.math.complex.ComplexTest.testTan(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double division with multiplication</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>tan</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>822</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>43</index><block>7</block><killingTest>org.apache.commons.math.complex.ComplexTest.testTan(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double division with multiplication</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="2"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>tan</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>814</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTest>org.apache.commons.math.complex.ComplexTest.testTan(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>tan</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>815</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>9</index><block>2</block><killingTest>org.apache.commons.math.complex.ComplexTest.testTanNaN(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::tan</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>tan</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>822</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>45</index><block>8</block><killingTest>org.apache.commons.math.complex.ComplexTest.testTan(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::tan</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>tanh</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>856</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>16</index><block>3</block><killingTest>org.apache.commons.math.complex.ComplexTest.testTanh(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>tanh</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>857</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>23</index><block>3</block><killingTest>org.apache.commons.math.complex.ComplexTest.testTanh(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>tanh</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>858</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>31</index><block>5</block><killingTest>org.apache.commons.math.complex.ComplexTest.testTanh(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double addition with subtraction</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>tanh</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>860</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>39</index><block>6</block><killingTest>org.apache.commons.math.complex.ComplexTest.testTanh(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double division with multiplication</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>tanh</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>860</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>43</index><block>7</block><killingTest>org.apache.commons.math.complex.ComplexTest.testTanh(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double division with multiplication</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="2"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>tanh</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>852</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTest>org.apache.commons.math.complex.ComplexTest.testTanh(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>tanh</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>853</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>9</index><block>2</block><killingTest>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::tanh</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>tanh</mutatedMethod><methodDescription>()Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>860</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>45</index><block>8</block><killingTest>org.apache.commons.math.complex.ComplexTest.testTanh(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced return value with null for org/apache/commons/math/complex/Complex::tanh</description></mutation>
</mutations>