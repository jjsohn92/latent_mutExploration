<mutations>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(C)V</methodDescription><lineNumber>178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><block>1</block><killingTest /><description>removed call to org/apache/commons/math/stat/Frequency::addValue</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>151</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><block>1</block><killingTest /><description>removed call to org/apache/commons/math/stat/Frequency::addValue</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>169</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><block>1</block><killingTest /><description>removed call to org/apache/commons/math/stat/Frequency::addValue</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>137</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>47</index><block>10</block><killingTest /><description>Replaced long addition with subtraction</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><block>5</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Integer;)V</methodDescription><lineNumber>160</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><block>2</block><killingTest /><description>removed call to org/apache/commons/math/stat/Frequency::addValue</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><block>1</block><killingTest /><description>removed call to org/apache/commons/math/stat/Frequency::addValue</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>clear</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>183</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><block>0</block><killingTest /><description>removed call to java/util/TreeMap::clear</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(C)J</methodDescription><lineNumber>265</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>7</index><block>2</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCount</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(I)J</methodDescription><lineNumber>245</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>8</index><block>2</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCount</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>255</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>7</index><block>2</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCount</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>223</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>229</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>29</index><block>5</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>224</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>13</index><block>3</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCount</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>235</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>44</index><block>10</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCount</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(C)J</methodDescription><lineNumber>405</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>7</index><block>2</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCumFreq</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(I)J</methodDescription><lineNumber>381</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>8</index><block>2</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCumFreq</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>393</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>7</index><block>2</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCumFreq</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>352</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>81</index><block>19</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>356</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>94</index><block>23</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>363</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>121</index><block>32</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>364</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>128</index><block>34</block><killingTest /><description>Replaced long addition with subtraction</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><block>1</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>334</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><block>3</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>338</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>34</index><block>8</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>345</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>57</index><block>12</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>352</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>81</index><block>19</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>356</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>94</index><block>23</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>361</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>109</index><block>29</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>363</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>121</index><block>32</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>335</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>24</index><block>6</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCumFreq</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>349</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>72</index><block>16</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCumFreq</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>357</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>99</index><block>25</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCumFreq</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>366</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>134</index><block>35</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCumFreq</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>369</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>141</index><block>37</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCumFreq</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(C)D</methodDescription><lineNumber>465</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>7</index><block>2</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/stat/Frequency::getCumPct</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>439</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>8</index><block>2</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/stat/Frequency::getCumPct</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>452</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>7</index><block>2</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/stat/Frequency::getCumPct</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>426</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>24</index><block>4</block><killingTest /><description>Replaced double division with multiplication</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>423</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><block>1</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>424</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>15</index><block>2</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/stat/Frequency::getCumPct</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>426</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>25</index><block>4</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/stat/Frequency::getCumPct</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(C)D</methodDescription><lineNumber>317</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>7</index><block>2</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/stat/Frequency::getPct</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>295</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>8</index><block>2</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/stat/Frequency::getPct</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>306</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>7</index><block>2</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/stat/Frequency::getPct</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>284</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>24</index><block>4</block><killingTest /><description>Replaced double division with multiplication</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>281</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><block>1</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>282</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>15</index><block>2</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/stat/Frequency::getPct</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>284</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>25</index><block>4</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/stat/Frequency::getPct</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>210</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>24</index><block>7</block><killingTest /><description>Replaced long addition with subtraction</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>209</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><block>4</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>212</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>30</index><block>8</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getSumFreq</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><block>7</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.EmptyObjectReturnValsMutator</mutator><index>99</index><block>24</block><killingTest /><description>replaced return value with "" for org/apache/commons/math/stat/Frequency::toString</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>valuesIterator</mutatedMethod><methodDescription>()Ljava/util/Iterator;</methodDescription><lineNumber>196</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>7</index><block>2</block><killingTest /><description>replaced return value with null for org/apache/commons/math/stat/Frequency::valuesIterator</description></mutation>
</mutations>