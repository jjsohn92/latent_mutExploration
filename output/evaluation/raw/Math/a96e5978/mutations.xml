<mutations>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="14"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>14</index><block>0</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="4"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>18</index><block>1</block><killingTest>org.apache.commons.math.fraction.FractionTest.testAdd(org.apache.commons.math.fraction.FractionTest)</killingTest><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>7</index><block>0</block><killingTest>org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest.testBigStep(org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest)</killingTest><description>Replaced long addition with subtraction</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><block>0</block><killingTest>org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest.testBigStep(org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>18</index><block>1</block><killingTest>org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest.testBigStep(org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="3"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>32</index><block>4</block><killingTest>org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest.testCorrectorCoefficients(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest)</killingTest><description>replaced int return with 0 for org/apache/commons/math/util/MathUtils::addAndCheck</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>7</index><block>1</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/util/MathUtils::addAndCheck</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(JJLjava/lang/String;)J</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><block>0</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(JJLjava/lang/String;)J</methodDescription><lineNumber>117</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>22</index><block>3</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(JJLjava/lang/String;)J</methodDescription><lineNumber>118</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>28</index><block>4</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(JJLjava/lang/String;)J</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>36</index><block>5</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(JJLjava/lang/String;)J</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>70</index><block>10</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(JJLjava/lang/String;)J</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>33</index><block>5</block><killingTest /><description>Replaced long subtraction with addition</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(JJLjava/lang/String;)J</methodDescription><lineNumber>121</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>41</index><block>6</block><killingTest /><description>Replaced long addition with subtraction</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(JJLjava/lang/String;)J</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>58</index><block>9</block><killingTest /><description>Replaced long addition with subtraction</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(JJLjava/lang/String;)J</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>68</index><block>10</block><killingTest /><description>Replaced long subtraction with addition</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(JJLjava/lang/String;)J</methodDescription><lineNumber>135</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>75</index><block>11</block><killingTest /><description>Replaced long addition with subtraction</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(JJLjava/lang/String;)J</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(JJLjava/lang/String;)J</methodDescription><lineNumber>117</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>22</index><block>3</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(JJLjava/lang/String;)J</methodDescription><lineNumber>118</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><block>4</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(JJLjava/lang/String;)J</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>36</index><block>5</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(JJLjava/lang/String;)J</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>70</index><block>10</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(JJLjava/lang/String;)J</methodDescription><lineNumber>141</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>91</index><block>14</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/util/MathUtils::addAndCheck</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>5</index><block>0</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>17</index><block>3</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>182</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>47</index><block>10</block><killingTest /><description>Replaced integer subtraction with addition</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><block>3</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>30</index><block>6</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>32</index><block>7</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>182</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>43</index><block>9</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>182</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>48</index><block>10</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>187</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>68</index><block>14</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>180</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>37</index><block>8</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/util/MathUtils::binomialCoefficient</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>183</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>54</index><block>11</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/util/MathUtils::binomialCoefficient</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>191</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>80</index><block>17</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/util/MathUtils::binomialCoefficient</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientDouble</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>217</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>8</index><block>2</block><killingTest>org.apache.commons.math.distribution.BinomialDistributionTest.testDegenerate0(org.apache.commons.math.distribution.BinomialDistributionTest)</killingTest><description>Replaced double addition with subtraction</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientDouble</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>217</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>10</index><block>3</block><killingTest>org.apache.commons.math.distribution.BinomialDistributionTest.testDegenerate0(org.apache.commons.math.distribution.BinomialDistributionTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::binomialCoefficientDouble</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="2"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>239</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>5</index><block>0</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testDegenerateFullSample(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="3"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>243</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>17</index><block>3</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testDegenerateNoFailures(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="3"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>256</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>71</index><block>14</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testDensities(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="3"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>261</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>95</index><block>18</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testDensities(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>256</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>82</index><block>16</block><killingTest /><description>Changed increment from 1 to -1</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>261</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>106</index><block>20</block><killingTest /><description>Changed increment from 1 to -1</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="13"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>250</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>47</index><block>10</block><killingTest /><description>Replaced integer subtraction with addition</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="3"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>256</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>65</index><block>13</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testDensities(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="3"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>257</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>78</index><block>16</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testDensities(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>Replaced double addition with subtraction</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="3"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>261</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>94</index><block>18</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testDensities(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>Replaced integer subtraction with addition</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="3"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>262</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>102</index><block>20</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testDensities(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>Replaced double subtraction with addition</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>239</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>0</block><killingTest>org.apache.commons.math.distribution.BinomialDistributionTest.testDegenerate0(org.apache.commons.math.distribution.BinomialDistributionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>243</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><block>3</block><killingTest>org.apache.commons.math.distribution.BinomialDistributionTest.testDegenerate0(org.apache.commons.math.distribution.BinomialDistributionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="5"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>247</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>30</index><block>6</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testDensities(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="4"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>247</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>32</index><block>7</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testDensities(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="4"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>250</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>43</index><block>9</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testDensities(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="3"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>250</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>48</index><block>10</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testDensities(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="3"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>256</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>71</index><block>14</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testDensities(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="3"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>261</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>95</index><block>18</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testDensities(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="2"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>251</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>55</index><block>12</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testDensities(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::binomialCoefficientLog</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="3"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>265</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>112</index><block>21</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testDensities(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::binomialCoefficientLog</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>cosh</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>276</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>6</index><block>1</block><killingTest>org.apache.commons.math.complex.ComplexTest.testCos(org.apache.commons.math.complex.ComplexTest)</killingTest><description>removed negation</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>cosh</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>276</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>8</index><block>2</block><killingTest>org.apache.commons.math.complex.ComplexTest.testCos(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double addition with subtraction</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>cosh</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>276</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>10</index><block>2</block><killingTest>org.apache.commons.math.complex.ComplexTest.testCos(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double division with multiplication</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>cosh</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>276</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>11</index><block>2</block><killingTest>org.apache.commons.math.complex.ComplexTest.testCos(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::cosh</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="3"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(DD)Z</methodDescription><lineNumber>288</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTest>org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest.testCopyConsistency(org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(DD)Z</methodDescription><lineNumber>288</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><block>3</block><killingTest>org.apache.commons.math.stat.descriptive.moment.FirstMomentTest.testEqualsAndHashCode(org.apache.commons.math.stat.descriptive.moment.FirstMomentTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(DD)Z</methodDescription><lineNumber>288</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><block>4</block><killingTest>org.apache.commons.math.stat.descriptive.moment.FourthMomentTest.testCopyConsistency(org.apache.commons.math.stat.descriptive.moment.FourthMomentTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="5"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(DD)Z</methodDescription><lineNumber>288</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.BooleanTrueReturnValsMutator</mutator><index>24</index><block>7</block><killingTest>org.apache.commons.math.stat.descriptive.moment.FirstMomentTest.testEqualsAndHashCode(org.apache.commons.math.stat.descriptive.moment.FirstMomentTest)</killingTest><description>replaced boolean return with true for org/apache/commons/math/util/MathUtils::equals</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>([D[D)Z</methodDescription><lineNumber>308</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>60</index><block>15</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>([D[D)Z</methodDescription><lineNumber>303</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>28</index><block>8</block><killingTest /><description>Replaced XOR with AND</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>([D[D)Z</methodDescription><lineNumber>302</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>([D[D)Z</methodDescription><lineNumber>302</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>1</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>([D[D)Z</methodDescription><lineNumber>303</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><block>2</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>([D[D)Z</methodDescription><lineNumber>303</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><block>5</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>([D[D)Z</methodDescription><lineNumber>303</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>29</index><block>8</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>([D[D)Z</methodDescription><lineNumber>305</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>45</index><block>12</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>([D[D)Z</methodDescription><lineNumber>308</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>60</index><block>15</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>([D[D)Z</methodDescription><lineNumber>309</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>70</index><block>17</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>([D[D)Z</methodDescription><lineNumber>313</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.BooleanFalseReturnValsMutator</mutator><index>84</index><block>20</block><killingTest /><description>replaced boolean return with false for org/apache/commons/math/util/MathUtils::equals</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>([D[D)Z</methodDescription><lineNumber>303</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.BooleanTrueReturnValsMutator</mutator><index>37</index><block>11</block><killingTest /><description>replaced boolean return with true for org/apache/commons/math/util/MathUtils::equals</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>([D[D)Z</methodDescription><lineNumber>306</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.BooleanTrueReturnValsMutator</mutator><index>49</index><block>13</block><killingTest /><description>replaced boolean return with true for org/apache/commons/math/util/MathUtils::equals</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>([D[D)Z</methodDescription><lineNumber>310</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.BooleanTrueReturnValsMutator</mutator><index>74</index><block>18</block><killingTest /><description>replaced boolean return with true for org/apache/commons/math/util/MathUtils::equals</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>factorial</mutatedMethod><methodDescription>(I)J</methodDescription><lineNumber>340</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><block>2</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>factorial</mutatedMethod><methodDescription>(I)J</methodDescription><lineNumber>344</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>24</index><block>5</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/util/MathUtils::factorial</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>factorialDouble</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>368</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>4</index><block>0</block><killingTest>org.apache.commons.math.distribution.PoissonDistributionTest.testDensities(org.apache.commons.math.distribution.PoissonDistributionTest)</killingTest><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>factorialDouble</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>371</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>19</index><block>5</block><killingTest>org.apache.commons.math.distribution.PoissonDistributionTest.testDensities(org.apache.commons.math.distribution.PoissonDistributionTest)</killingTest><description>Replaced double addition with subtraction</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>factorialDouble</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>368</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>0</block><killingTest>org.apache.commons.math.distribution.PoissonDistributionTest.testDensities(org.apache.commons.math.distribution.PoissonDistributionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>factorialDouble</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>371</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>21</index><block>6</block><killingTest>org.apache.commons.math.distribution.PoissonDistributionTest.testDensities(org.apache.commons.math.distribution.PoissonDistributionTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::factorialDouble</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>factorialLog</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>388</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>4</index><block>0</block><killingTest>org.apache.commons.math.distribution.PoissonDistributionTest.testDensities(org.apache.commons.math.distribution.PoissonDistributionTest)</killingTest><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>factorialLog</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>392</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>25</index><block>4</block><killingTest>org.apache.commons.math.distribution.PoissonDistributionTest.testDensities(org.apache.commons.math.distribution.PoissonDistributionTest)</killingTest><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>factorialLog</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>392</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>36</index><block>6</block><killingTest /><description>Changed increment from 1 to -1</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>factorialLog</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>393</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>32</index><block>6</block><killingTest>org.apache.commons.math.distribution.PoissonDistributionTest.testDensities(org.apache.commons.math.distribution.PoissonDistributionTest)</killingTest><description>Replaced double addition with subtraction</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>factorialLog</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>388</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>0</block><killingTest>org.apache.commons.math.distribution.PoissonDistributionTest.testDensities(org.apache.commons.math.distribution.PoissonDistributionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>factorialLog</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>392</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>25</index><block>4</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>factorialLog</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>395</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>42</index><block>7</block><killingTest>org.apache.commons.math.distribution.PoissonDistributionTest.testDensities(org.apache.commons.math.distribution.PoissonDistributionTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::factorialLog</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>420</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>20</index><block>5</block><killingTest>org.apache.commons.math.fraction.FractionFormatTest.testFormatImproperNegative(org.apache.commons.math.fraction.FractionFormatTest)</killingTest><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="37"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>423</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>30</index><block>7</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="19"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>428</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>54</index><block>12</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>449</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>121</index><block>23</block><killingTest>org.apache.commons.math.fraction.FractionFormatTest.testFormatImproperNegative(org.apache.commons.math.fraction.FractionFormatTest)</killingTest><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>432</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>69</index><block>13</block><killingTest>org.apache.commons.math.fraction.FractionTest.testGetReducedFraction(org.apache.commons.math.fraction.FractionTest)</killingTest><description>Changed increment from 1 to -1</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>421</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>24</index><block>6</block><killingTest /><description>removed negation</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>424</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>34</index><block>8</block><killingTest /><description>removed negation</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>439</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>99</index><block>19</block><killingTest>org.apache.commons.math.fraction.FractionFormatTest.testParseInteger(org.apache.commons.math.fraction.FractionFormatTest)</killingTest><description>removed negation</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>450</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>125</index><block>24</block><killingTest /><description>removed negation</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="16"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>459</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>149</index><block>27</block><killingTest>org.apache.commons.math.fraction.FractionTest.testMultiply(org.apache.commons.math.fraction.FractionTest)</killingTest><description>removed negation</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="2"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>413</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>14</index><block>4</block><killingTest>org.apache.commons.math.fraction.FractionTest.testEqualsAndHashCode(org.apache.commons.math.fraction.FractionTest)</killingTest><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="14"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>428</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>46</index><block>10</block><killingTest>org.apache.commons.math.fraction.FractionTest.testGetReducedFraction(org.apache.commons.math.fraction.FractionTest)</killingTest><description>Replaced bitwise AND with OR</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="3"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>428</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>50</index><block>11</block><killingTest>org.apache.commons.math.fraction.FractionTest.testGetReducedFraction(org.apache.commons.math.fraction.FractionTest)</killingTest><description>Replaced bitwise AND with OR</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>430</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>59</index><block>13</block><killingTest>org.apache.commons.math.fraction.FractionTest.testGetReducedFraction(org.apache.commons.math.fraction.FractionTest)</killingTest><description>Replaced integer division with multiplication</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="7"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>431</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>65</index><block>13</block><killingTest>org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest.testCorrectorCoefficients(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest)</killingTest><description>Replaced integer division with multiplication</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>439</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>89</index><block>17</block><killingTest>org.apache.commons.math.fraction.FractionFormatTest.testFormatImproperNegative(org.apache.commons.math.fraction.FractionFormatTest)</killingTest><description>Replaced bitwise AND with OR</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>439</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>98</index><block>19</block><killingTest /><description>Replaced integer division with multiplication</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>445</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>108</index><block>21</block><killingTest>org.apache.commons.math.fraction.FractionFormatTest.testFormatImproperNegative(org.apache.commons.math.fraction.FractionFormatTest)</killingTest><description>Replaced bitwise AND with OR</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>446</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>114</index><block>22</block><killingTest /><description>Replaced integer division with multiplication</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>455</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>138</index><block>26</block><killingTest /><description>Replaced integer subtraction with addition</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>455</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>140</index><block>26</block><killingTest /><description>Replaced integer division with multiplication</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="14"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>459</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>152</index><block>27</block><killingTest>org.apache.commons.math.fraction.FractionTest.testGetReducedFraction(org.apache.commons.math.fraction.FractionTest)</killingTest><description>Replaced Shift Left with Shift Right</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="14"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>459</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>153</index><block>27</block><killingTest>org.apache.commons.math.fraction.FractionTest.testGetReducedFraction(org.apache.commons.math.fraction.FractionTest)</killingTest><description>Replaced integer multiplication with division</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>412</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>412</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>1</block><killingTest>org.apache.commons.math.fraction.FractionFormatTest.testFormatImproperNegative(org.apache.commons.math.fraction.FractionFormatTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>420</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><block>5</block><killingTest>org.apache.commons.math.fraction.FractionFormatTest.testFormatImproperNegative(org.apache.commons.math.fraction.FractionFormatTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>423</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>30</index><block>7</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>428</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>47</index><block>10</block><killingTest>org.apache.commons.math.fraction.FractionFormatTest.testFormatImproperNegative(org.apache.commons.math.fraction.FractionFormatTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>428</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>51</index><block>11</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>428</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>54</index><block>12</block><killingTest>org.apache.commons.math.fraction.FractionTest.testGetReducedFraction(org.apache.commons.math.fraction.FractionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>434</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>76</index><block>14</block><killingTest>org.apache.commons.math.fraction.FractionFormatTest.testFormatImproperNegative(org.apache.commons.math.fraction.FractionFormatTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>439</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>91</index><block>17</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>445</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>109</index><block>21</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>449</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>121</index><block>23</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>458</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>145</index><block>26</block><killingTest>org.apache.commons.math.fraction.FractionFormatTest.testFormatImproperNegative(org.apache.commons.math.fraction.FractionFormatTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="2"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>413</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>15</index><block>4</block><killingTest>org.apache.commons.math.fraction.FractionTest.testEqualsAndHashCode(org.apache.commons.math.fraction.FractionTest)</killingTest><description>replaced int return with 0 for org/apache/commons/math/util/MathUtils::gcd</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="14"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>459</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>154</index><block>27</block><killingTest>org.apache.commons.math.fraction.FractionTest.testGetReducedFraction(org.apache.commons.math.fraction.FractionTest)</killingTest><description>replaced int return with 0 for org/apache/commons/math/util/MathUtils::gcd</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>hash</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>469</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>8</index><block>2</block><killingTest>org.apache.commons.math.complex.ComplexTest.testHashCode(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced int return with 0 for org/apache/commons/math/util/MathUtils::hash</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>hash</mutatedMethod><methodDescription>([D)I</methodDescription><lineNumber>480</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>5</index><block>1</block><killingTest /><description>replaced int return with 0 for org/apache/commons/math/util/MathUtils::hash</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(B)B</methodDescription><lineNumber>491</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>4</index><block>0</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(B)B</methodDescription><lineNumber>491</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(B)B</methodDescription><lineNumber>491</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>12</index><block>3</block><killingTest /><description>replaced byte return with 0 for org/apache/commons/math/util/MathUtils::indicator</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="6"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>506</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>16</index><block>3</block><killingTest>org.apache.commons.math.complex.ComplexTest.testSqrtImaginaryZero(org.apache.commons.math.complex.ComplexTest)</killingTest><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>503</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTest>org.apache.commons.math.analysis.LaguerreSolverTest.testQuinticFunction2(org.apache.commons.math.analysis.LaguerreSolverTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="3"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>506</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><block>3</block><killingTest>org.apache.commons.math.complex.ComplexTest.testSqrtImaginaryNegative(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>504</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>9</index><block>2</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::indicator</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>506</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>24</index><block>6</block><killingTest>org.apache.commons.math.analysis.LaguerreSolverTest.testQuinticFunction2(org.apache.commons.math.analysis.LaguerreSolverTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::indicator</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(F)F</methodDescription><lineNumber>520</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>16</index><block>3</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(F)F</methodDescription><lineNumber>517</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(F)F</methodDescription><lineNumber>520</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><block>3</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(F)F</methodDescription><lineNumber>518</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>9</index><block>2</block><killingTest /><description>replaced float return with 0.0f for org/apache/commons/math/util/MathUtils::indicator</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(F)F</methodDescription><lineNumber>520</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>24</index><block>6</block><killingTest /><description>replaced float return with 0.0f for org/apache/commons/math/util/MathUtils::indicator</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>530</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>4</index><block>0</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>530</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>530</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>12</index><block>3</block><killingTest /><description>replaced int return with 0 for org/apache/commons/math/util/MathUtils::indicator</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>540</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><block>0</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>540</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>540</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>14</index><block>3</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/util/MathUtils::indicator</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(S)S</methodDescription><lineNumber>551</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>4</index><block>0</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(S)S</methodDescription><lineNumber>551</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(S)S</methodDescription><lineNumber>551</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>12</index><block>3</block><killingTest /><description>replaced short return with 0 for org/apache/commons/math/util/MathUtils::indicator</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>lcm</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>564</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>7</index><block>1</block><killingTest /><description>Replaced integer division with multiplication</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>lcm</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>564</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>11</index><block>3</block><killingTest /><description>replaced int return with 0 for org/apache/commons/math/util/MathUtils::lcm</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>584</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>7</index><block>2</block><killingTest /><description>Replaced double division with multiplication</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>584</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>8</index><block>2</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::log</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>599</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>14</index><block>0</block><killingTest>org.apache.commons.math.fraction.FractionTest.testMultiply(org.apache.commons.math.fraction.FractionTest)</killingTest><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="7"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>599</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>18</index><block>1</block><killingTest>org.apache.commons.math.fraction.FractionTest.testSubtract(org.apache.commons.math.fraction.FractionTest)</killingTest><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>598</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>7</index><block>0</block><killingTest>org.apache.commons.math.fraction.FractionTest.testMultiply(org.apache.commons.math.fraction.FractionTest)</killingTest><description>Replaced long multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>599</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><block>0</block><killingTest>org.apache.commons.math.fraction.FractionTest.testMultiply(org.apache.commons.math.fraction.FractionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>599</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>18</index><block>1</block><killingTest>org.apache.commons.math.fraction.FractionTest.testMultiply(org.apache.commons.math.fraction.FractionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>602</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>32</index><block>4</block><killingTest>org.apache.commons.math.fraction.FractionTest.testMultiply(org.apache.commons.math.fraction.FractionTest)</killingTest><description>replaced int return with 0 for org/apache/commons/math/util/MathUtils::mulAndCheck</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>618</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>10</index><block>0</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>622</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>25</index><block>3</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>623</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>31</index><block>4</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>625</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>39</index><block>5</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>630</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>62</index><block>9</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>632</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>70</index><block>10</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>642</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>100</index><block>15</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>647</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>108</index><block>16</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>625</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>37</index><block>5</block><killingTest /><description>Replaced long division with multiplication</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>626</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>44</index><block>6</block><killingTest /><description>Replaced long multiplication with division</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>632</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>67</index><block>10</block><killingTest /><description>Replaced long division with multiplication</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>633</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>75</index><block>11</block><killingTest /><description>Replaced long multiplication with division</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>647</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>106</index><block>16</block><killingTest /><description>Replaced long division with multiplication</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>648</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>113</index><block>17</block><killingTest /><description>Replaced long multiplication with division</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>618</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>622</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>25</index><block>3</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>623</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>31</index><block>4</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>625</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>39</index><block>5</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>630</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>62</index><block>9</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>632</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>70</index><block>10</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>642</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>100</index><block>15</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>647</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>108</index><block>16</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>657</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>134</index><block>21</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/util/MathUtils::mulAndCheck</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>683</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>26</index><block>6</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>694</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>68</index><block>11</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>690</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>45</index><block>11</block><killingTest /><description>Replaced bitwise AND with OR</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>691</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>51</index><block>11</block><killingTest /><description>Replaced bitwise AND with OR</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>692</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>57</index><block>11</block><killingTest /><description>Replaced bitwise AND with OR</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>694</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>64</index><block>11</block><killingTest /><description>Replaced double subtraction with addition</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>694</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>65</index><block>11</block><killingTest /><description>Replaced double multiplication with division</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>697</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>80</index><block>13</block><killingTest /><description>Replaced long addition with subtraction</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>697</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>81</index><block>13</block><killingTest /><description>Replaced bitwise OR with AND</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>700</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>89</index><block>15</block><killingTest /><description>Replaced bitwise OR with AND</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>700</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>92</index><block>15</block><killingTest /><description>Replaced long addition with subtraction</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>700</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>93</index><block>15</block><killingTest /><description>Replaced bitwise OR with AND</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>706</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>108</index><block>18</block><killingTest /><description>Replaced long subtraction with addition</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>706</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>109</index><block>18</block><killingTest /><description>Replaced bitwise OR with AND</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>706</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>111</index><block>18</block><killingTest /><description>Replaced bitwise OR with AND</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>710</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>119</index><block>20</block><killingTest /><description>Replaced bitwise OR with AND</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>710</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>122</index><block>20</block><killingTest /><description>Replaced long subtraction with addition</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>710</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>123</index><block>20</block><killingTest /><description>Replaced bitwise OR with AND</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>680</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>680</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><block>3</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>682</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><block>5</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>683</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><block>6</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>694</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>68</index><block>11</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>696</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>74</index><block>12</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>705</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>102</index><block>17</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>681</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>13</index><block>4</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::nextAfter</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>683</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>34</index><block>9</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::nextAfter</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>697</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>83</index><block>14</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::nextAfter</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>700</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>95</index><block>16</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::nextAfter</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>706</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>113</index><block>19</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::nextAfter</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>710</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>125</index><block>21</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::nextAfter</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>normalizeAngle</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>764</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>7</index><block>0</block><killingTest>org.apache.commons.math.geometry.RotationTest.testAxisAngle(org.apache.commons.math.geometry.RotationTest)</killingTest><description>Replaced double addition with subtraction</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>normalizeAngle</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>764</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>9</index><block>0</block><killingTest>org.apache.commons.math.geometry.RotationTest.testAxisAngle(org.apache.commons.math.geometry.RotationTest)</killingTest><description>Replaced double subtraction with addition</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>normalizeAngle</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>764</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>11</index><block>0</block><killingTest>org.apache.commons.math.geometry.RotationTest.testAxisAngle(org.apache.commons.math.geometry.RotationTest)</killingTest><description>Replaced double division with multiplication</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>normalizeAngle</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>764</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>13</index><block>1</block><killingTest>org.apache.commons.math.geometry.RotationTest.testAxisAngle(org.apache.commons.math.geometry.RotationTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="6"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>normalizeAngle</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>764</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>14</index><block>1</block><killingTest>org.apache.commons.math.geometry.RotationTest.testAngles(org.apache.commons.math.geometry.RotationTest)</killingTest><description>Replaced double subtraction with addition</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>normalizeAngle</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>764</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>15</index><block>1</block><killingTest>org.apache.commons.math.geometry.RotationTest.testAxisAngle(org.apache.commons.math.geometry.RotationTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::normalizeAngle</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>round</mutatedMethod><methodDescription>(DI)D</methodDescription><lineNumber>777</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>7</index><block>1</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::round</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>round</mutatedMethod><methodDescription>(DII)D</methodDescription><lineNumber>799</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>22</index><block>6</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>round</mutatedMethod><methodDescription>(DII)D</methodDescription><lineNumber>794</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>13</index><block>4</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::round</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>round</mutatedMethod><methodDescription>(DII)D</methodDescription><lineNumber>800</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>26</index><block>7</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::round</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>round</mutatedMethod><methodDescription>(DII)D</methodDescription><lineNumber>802</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>31</index><block>8</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::round</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>round</mutatedMethod><methodDescription>(FI)F</methodDescription><lineNumber>817</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>7</index><block>1</block><killingTest /><description>replaced float return with 0.0f for org/apache/commons/math/util/MathUtils::round</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>round</mutatedMethod><methodDescription>(FII)F</methodDescription><lineNumber>834</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>14</index><block>2</block><killingTest /><description>Replaced float multiplication with division</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>round</mutatedMethod><methodDescription>(FII)F</methodDescription><lineNumber>835</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>20</index><block>2</block><killingTest /><description>Replaced float multiplication with division</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>round</mutatedMethod><methodDescription>(FII)F</methodDescription><lineNumber>835</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>28</index><block>3</block><killingTest /><description>Replaced float division with multiplication</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>round</mutatedMethod><methodDescription>(FII)F</methodDescription><lineNumber>835</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>29</index><block>3</block><killingTest /><description>replaced float return with 0.0f for org/apache/commons/math/util/MathUtils::round</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>roundUnscaled</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>873</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>87</index><block>20</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>roundUnscaled</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>882</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>116</index><block>26</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>roundUnscaled</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>884</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>129</index><block>29</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>roundUnscaled</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>900</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>184</index><block>42</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>roundUnscaled</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>872</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>80</index><block>20</block><killingTest /><description>Replaced double subtraction with addition</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>roundUnscaled</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>881</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>109</index><block>26</block><killingTest /><description>Replaced double subtraction with addition</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>roundUnscaled</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>888</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>142</index><block>33</block><killingTest /><description>Replaced double division with multiplication</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>roundUnscaled</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>888</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>146</index><block>34</block><killingTest /><description>Replaced double division with multiplication</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>roundUnscaled</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>899</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>177</index><block>42</block><killingTest /><description>Replaced double subtraction with addition</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>roundUnscaled</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>854</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><block>1</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>roundUnscaled</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>864</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>48</index><block>11</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>roundUnscaled</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>873</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>87</index><block>20</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>roundUnscaled</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>882</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>116</index><block>26</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>roundUnscaled</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>884</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>129</index><block>29</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>roundUnscaled</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>888</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>149</index><block>35</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>roundUnscaled</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>900</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>184</index><block>42</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>roundUnscaled</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>908</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>207</index><block>48</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>roundUnscaled</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>918</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>238</index><block>56</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::roundUnscaled</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>scalb</mutatedMethod><methodDescription>(DI)D</methodDescription><lineNumber>735</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>28</index><block>7</block><killingTest /><description>Replaced bitwise AND with OR</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>scalb</mutatedMethod><methodDescription>(DI)D</methodDescription><lineNumber>736</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>34</index><block>7</block><killingTest /><description>Replaced bitwise AND with OR</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>scalb</mutatedMethod><methodDescription>(DI)D</methodDescription><lineNumber>739</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>43</index><block>7</block><killingTest /><description>Replaced Shift Left with Shift Right</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>scalb</mutatedMethod><methodDescription>(DI)D</methodDescription><lineNumber>739</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>44</index><block>7</block><killingTest /><description>Replaced long addition with subtraction</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>scalb</mutatedMethod><methodDescription>(DI)D</methodDescription><lineNumber>739</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>45</index><block>7</block><killingTest /><description>Replaced bitwise OR with AND</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>scalb</mutatedMethod><methodDescription>(DI)D</methodDescription><lineNumber>729</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>scalb</mutatedMethod><methodDescription>(DI)D</methodDescription><lineNumber>729</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><block>2</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>scalb</mutatedMethod><methodDescription>(DI)D</methodDescription><lineNumber>729</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><block>4</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>scalb</mutatedMethod><methodDescription>(DI)D</methodDescription><lineNumber>730</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>17</index><block>5</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::scalb</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>scalb</mutatedMethod><methodDescription>(DI)D</methodDescription><lineNumber>740</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>51</index><block>8</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::scalb</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(B)B</methodDescription><lineNumber>932</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>10</index><block>2</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(B)B</methodDescription><lineNumber>932</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(B)B</methodDescription><lineNumber>932</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><block>2</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(B)B</methodDescription><lineNumber>932</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>18</index><block>5</block><killingTest /><description>replaced byte return with 0 for org/apache/commons/math/util/MathUtils::sign</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="6"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>951</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>24</index><block>5</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>948</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTest>org.apache.commons.math.analysis.MullerSolverTest.testExpm1Function(org.apache.commons.math.analysis.MullerSolverTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>951</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><block>3</block><killingTest>org.apache.commons.math.analysis.MullerSolverTest.testExpm1Function(org.apache.commons.math.analysis.MullerSolverTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="6"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>951</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>24</index><block>5</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>949</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>9</index><block>2</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::sign</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>951</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>32</index><block>8</block><killingTest>org.apache.commons.math.analysis.MullerSolverTest.testExpm1Function(org.apache.commons.math.analysis.MullerSolverTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::sign</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(F)F</methodDescription><lineNumber>969</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>24</index><block>5</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(F)F</methodDescription><lineNumber>966</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(F)F</methodDescription><lineNumber>969</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><block>3</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(F)F</methodDescription><lineNumber>969</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>24</index><block>5</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(F)F</methodDescription><lineNumber>967</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>9</index><block>2</block><killingTest /><description>replaced float return with 0.0f for org/apache/commons/math/util/MathUtils::sign</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(F)F</methodDescription><lineNumber>969</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>32</index><block>8</block><killingTest /><description>replaced float return with 0.0f for org/apache/commons/math/util/MathUtils::sign</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="2"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>983</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>10</index><block>2</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>983</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>0</block><killingTest>org.apache.commons.math.fraction.FractionFormatTest.testParseProper(org.apache.commons.math.fraction.FractionFormatTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>983</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><block>2</block><killingTest>org.apache.commons.math.fraction.FractionFormatTest.testParseProper(org.apache.commons.math.fraction.FractionFormatTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>983</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>18</index><block>5</block><killingTest>org.apache.commons.math.fraction.FractionFormatTest.testParseProper(org.apache.commons.math.fraction.FractionFormatTest)</killingTest><description>replaced int return with 0 for org/apache/commons/math/util/MathUtils::sign</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>997</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>14</index><block>2</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>997</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>997</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><block>2</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>997</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>22</index><block>5</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/util/MathUtils::sign</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(S)S</methodDescription><lineNumber>1012</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>10</index><block>2</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(S)S</methodDescription><lineNumber>1012</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(S)S</methodDescription><lineNumber>1012</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><block>2</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(S)S</methodDescription><lineNumber>1012</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>18</index><block>5</block><killingTest /><description>replaced short return with 0 for org/apache/commons/math/util/MathUtils::sign</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sinh</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1023</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>6</index><block>1</block><killingTest>org.apache.commons.math.complex.ComplexTest.testCos(org.apache.commons.math.complex.ComplexTest)</killingTest><description>removed negation</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sinh</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1023</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>8</index><block>2</block><killingTest>org.apache.commons.math.complex.ComplexTest.testCos(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double subtraction with addition</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sinh</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1023</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>10</index><block>2</block><killingTest>org.apache.commons.math.complex.ComplexTest.testCos(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double division with multiplication</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sinh</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1023</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>11</index><block>2</block><killingTest>org.apache.commons.math.complex.ComplexTest.testCos(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::sinh</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>subAndCheck</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>1038</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>14</index><block>0</block><killingTest>org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest.testBigStep(org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest)</killingTest><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="14"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>subAndCheck</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>1038</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>18</index><block>1</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="3"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>subAndCheck</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>1037</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>7</index><block>0</block><killingTest>org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest.testCorrectorCoefficients(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest)</killingTest><description>Replaced long subtraction with addition</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>subAndCheck</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>1038</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><block>0</block><killingTest>org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest.testBigStep(org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>subAndCheck</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>1038</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>18</index><block>1</block><killingTest>org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest.testBigStep(org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>subAndCheck</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>1041</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>32</index><block>4</block><killingTest>org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest.testBigStep(org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest)</killingTest><description>replaced int return with 0 for org/apache/commons/math/util/MathUtils::subAndCheck</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>subAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>1058</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>16</index><block>1</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>subAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>1065</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>38</index><block>5</block><killingTest /><description>removed negation</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>subAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>1059</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>21</index><block>2</block><killingTest /><description>Replaced long subtraction with addition</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>subAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>1057</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>subAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>1058</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><block>1</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>subAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>1067</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>46</index><block>7</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/util/MathUtils::subAndCheck</description></mutation>
</mutations>