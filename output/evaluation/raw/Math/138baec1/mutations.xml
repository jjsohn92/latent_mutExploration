<mutations>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="3"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>14</index><block>0</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="2"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>18</index><block>1</block><killingTest>org.apache.commons.math.fraction.FractionTest.testAdd(org.apache.commons.math.fraction.FractionTest)</killingTest><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>7</index><block>0</block><killingTest>org.apache.commons.math.linear.SparseFieldVectorTest.testMapFunctions(org.apache.commons.math.linear.SparseFieldVectorTest)</killingTest><description>Replaced long addition with subtraction</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><block>0</block><killingTest>org.apache.commons.math.linear.SparseFieldVectorTest.testMapFunctions(org.apache.commons.math.linear.SparseFieldVectorTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>18</index><block>1</block><killingTest>org.apache.commons.math.linear.SparseFieldVectorTest.testMapFunctions(org.apache.commons.math.linear.SparseFieldVectorTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>30</index><block>4</block><killingTest>org.apache.commons.math.linear.SparseFieldVectorTest.testMapFunctions(org.apache.commons.math.linear.SparseFieldVectorTest)</killingTest><description>replaced int return with 0 for org/apache/commons/math/util/MathUtils::addAndCheck</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>7</index><block>1</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/util/MathUtils::addAndCheck</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(JJLjava/lang/String;)J</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><block>0</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(JJLjava/lang/String;)J</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>21</index><block>3</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(JJLjava/lang/String;)J</methodDescription><lineNumber>137</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>27</index><block>4</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(JJLjava/lang/String;)J</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>35</index><block>5</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(JJLjava/lang/String;)J</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>66</index><block>10</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(JJLjava/lang/String;)J</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>32</index><block>5</block><killingTest /><description>Replaced long subtraction with addition</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(JJLjava/lang/String;)J</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>40</index><block>6</block><killingTest /><description>Replaced long addition with subtraction</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(JJLjava/lang/String;)J</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>55</index><block>9</block><killingTest /><description>Replaced long addition with subtraction</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(JJLjava/lang/String;)J</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>64</index><block>10</block><killingTest /><description>Replaced long subtraction with addition</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(JJLjava/lang/String;)J</methodDescription><lineNumber>154</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>71</index><block>11</block><killingTest /><description>Replaced long addition with subtraction</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(JJLjava/lang/String;)J</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(JJLjava/lang/String;)J</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>21</index><block>3</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(JJLjava/lang/String;)J</methodDescription><lineNumber>137</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>27</index><block>4</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(JJLjava/lang/String;)J</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>35</index><block>5</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(JJLjava/lang/String;)J</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>66</index><block>10</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>addAndCheck</mutatedMethod><methodDescription>(JJLjava/lang/String;)J</methodDescription><lineNumber>160</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>85</index><block>14</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/util/MathUtils::addAndCheck</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>197</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>38</index><block>7</block><killingTest>org.apache.commons.math.distribution.PascalDistributionTest.testDensities(org.apache.commons.math.distribution.PascalDistributionTest)</killingTest><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="7"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>206</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>55</index><block>10</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>209</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>71</index><block>12</block><killingTest>org.apache.commons.math.distribution.PascalDistributionTest.testDensities(org.apache.commons.math.distribution.PascalDistributionTest)</killingTest><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>213</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>95</index><block>15</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>217</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>111</index><block>17</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>233</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>158</index><block>22</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>211</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>84</index><block>13</block><killingTest>org.apache.commons.math.distribution.PascalDistributionTest.testDensities(org.apache.commons.math.distribution.PascalDistributionTest)</killingTest><description>Changed increment from 1 to -1</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>209</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>87</index><block>13</block><killingTest>org.apache.commons.math.distribution.PascalDistributionTest.testDensities(org.apache.commons.math.distribution.PascalDistributionTest)</killingTest><description>Changed increment from 1 to -1</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>226</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>135</index><block>19</block><killingTest /><description>Changed increment from 1 to -1</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>217</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>138</index><block>19</block><killingTest /><description>Changed increment from 1 to -1</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>236</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>182</index><block>25</block><killingTest /><description>Changed increment from 1 to -1</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>233</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>185</index><block>25</block><killingTest /><description>Changed increment from 1 to -1</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="7"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>193</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>25</index><block>5</block><killingTest /><description>Replaced integer subtraction with addition</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="7"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>197</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>37</index><block>7</block><killingTest /><description>Replaced integer division with multiplication</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>198</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>44</index><block>8</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testCumulativeProbabilities(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>Replaced integer subtraction with addition</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>60</index><block>11</block><killingTest>org.apache.commons.math.distribution.PascalDistributionTest.testDensities(org.apache.commons.math.distribution.PascalDistributionTest)</killingTest><description>Replaced integer subtraction with addition</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>62</index><block>11</block><killingTest>org.apache.commons.math.distribution.PascalDistributionTest.testDensities(org.apache.commons.math.distribution.PascalDistributionTest)</killingTest><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>210</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>77</index><block>13</block><killingTest>org.apache.commons.math.distribution.PascalDistributionTest.testDensities(org.apache.commons.math.distribution.PascalDistributionTest)</killingTest><description>Replaced long multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>210</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>80</index><block>13</block><killingTest>org.apache.commons.math.distribution.PascalDistributionTest.testDensities(org.apache.commons.math.distribution.PascalDistributionTest)</killingTest><description>Replaced long division with multiplication</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>216</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>100</index><block>16</block><killingTest /><description>Replaced integer subtraction with addition</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>216</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>102</index><block>16</block><killingTest /><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>225</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>125</index><block>19</block><killingTest /><description>Replaced long division with multiplication</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>225</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>126</index><block>19</block><killingTest /><description>Replaced long division with multiplication</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>225</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>130</index><block>19</block><killingTest /><description>Replaced long division with multiplication</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>225</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>131</index><block>19</block><killingTest /><description>Replaced long multiplication with division</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>232</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>147</index><block>21</block><killingTest /><description>Replaced integer subtraction with addition</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>232</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>149</index><block>21</block><killingTest /><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>235</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>172</index><block>24</block><killingTest /><description>Replaced long division with multiplication</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>235</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>173</index><block>24</block><killingTest /><description>Replaced long division with multiplication</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>235</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>177</index><block>24</block><killingTest /><description>Replaced long division with multiplication</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>190</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><block>1</block><killingTest>org.apache.commons.math.distribution.PascalDistributionTest.testDensities(org.apache.commons.math.distribution.PascalDistributionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>190</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><block>2</block><killingTest>org.apache.commons.math.distribution.PascalDistributionTest.testDensities(org.apache.commons.math.distribution.PascalDistributionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>193</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>21</index><block>4</block><killingTest>org.apache.commons.math.distribution.PascalDistributionTest.testDensities(org.apache.commons.math.distribution.PascalDistributionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>193</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><block>5</block><killingTest>org.apache.commons.math.distribution.PascalDistributionTest.testDensities(org.apache.commons.math.distribution.PascalDistributionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>197</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>38</index><block>7</block><killingTest>org.apache.commons.math.distribution.PascalDistributionTest.testDensities(org.apache.commons.math.distribution.PascalDistributionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="7"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>206</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>55</index><block>10</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>209</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>71</index><block>12</block><killingTest>org.apache.commons.math.distribution.PascalDistributionTest.testDensities(org.apache.commons.math.distribution.PascalDistributionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>213</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>95</index><block>15</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>217</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>111</index><block>17</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>233</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>158</index><block>22</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="7"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>189</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><block>0</block><killingTest /><description>removed call to org/apache/commons/math/util/MathUtils::checkBinomial</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>191</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>16</index><block>3</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/util/MathUtils::binomialCoefficient</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>194</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>31</index><block>6</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/util/MathUtils::binomialCoefficient</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>198</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>46</index><block>9</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testCumulativeProbabilities(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>replaced long return with 0 for org/apache/commons/math/util/MathUtils::binomialCoefficient</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficient</mutatedMethod><methodDescription>(II)J</methodDescription><lineNumber>239</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>190</index><block>26</block><killingTest>org.apache.commons.math.distribution.PascalDistributionTest.testDensities(org.apache.commons.math.distribution.PascalDistributionTest)</killingTest><description>replaced long return with 0 for org/apache/commons/math/util/MathUtils::binomialCoefficient</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientDouble</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>272</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>38</index><block>7</block><killingTest>org.apache.commons.math.distribution.PascalDistributionTest.testDensities(org.apache.commons.math.distribution.PascalDistributionTest)</killingTest><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="4"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientDouble</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>275</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>51</index><block>10</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientDouble</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>280</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>70</index><block>14</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testLargeValues(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientDouble</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>280</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>87</index><block>15</block><killingTest /><description>Changed increment from 1 to -1</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="4"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientDouble</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>269</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>25</index><block>5</block><killingTest /><description>Replaced integer subtraction with addition</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="4"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientDouble</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>272</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>37</index><block>7</block><killingTest /><description>Replaced integer division with multiplication</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientDouble</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>273</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>44</index><block>8</block><killingTest>org.apache.commons.math.distribution.PascalDistributionTest.testDensities(org.apache.commons.math.distribution.PascalDistributionTest)</killingTest><description>Replaced integer subtraction with addition</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientDouble</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>281</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>76</index><block>15</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testLargeValues(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>Replaced integer subtraction with addition</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientDouble</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>281</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>78</index><block>15</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testLargeValues(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientDouble</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>281</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>82</index><block>15</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testLargeValues(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>Replaced double division with multiplication</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientDouble</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>281</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>83</index><block>15</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testLargeValues(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientDouble</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>284</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>93</index><block>16</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testLargeValues(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>Replaced double addition with subtraction</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientDouble</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>266</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><block>1</block><killingTest>org.apache.commons.math.distribution.PascalDistributionTest.testDensities(org.apache.commons.math.distribution.PascalDistributionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientDouble</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>266</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><block>2</block><killingTest>org.apache.commons.math.distribution.PascalDistributionTest.testDensities(org.apache.commons.math.distribution.PascalDistributionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientDouble</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>269</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>21</index><block>4</block><killingTest>org.apache.commons.math.distribution.PascalDistributionTest.testDensities(org.apache.commons.math.distribution.PascalDistributionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientDouble</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>269</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><block>5</block><killingTest>org.apache.commons.math.distribution.PascalDistributionTest.testDensities(org.apache.commons.math.distribution.PascalDistributionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientDouble</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>272</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>38</index><block>7</block><killingTest>org.apache.commons.math.distribution.PascalDistributionTest.testDensities(org.apache.commons.math.distribution.PascalDistributionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="4"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientDouble</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>275</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>51</index><block>10</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testLargeValues(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientDouble</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>280</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>70</index><block>14</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testLargeValues(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="4"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientDouble</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>265</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><block>0</block><killingTest /><description>removed call to org/apache/commons/math/util/MathUtils::checkBinomial</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientDouble</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>267</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>16</index><block>3</block><killingTest>org.apache.commons.math.distribution.PascalDistributionTest.testDensities(org.apache.commons.math.distribution.PascalDistributionTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::binomialCoefficientDouble</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientDouble</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>270</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>31</index><block>6</block><killingTest>org.apache.commons.math.distribution.PascalDistributionTest.testDensities(org.apache.commons.math.distribution.PascalDistributionTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::binomialCoefficientDouble</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientDouble</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>273</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>46</index><block>9</block><killingTest>org.apache.commons.math.distribution.PascalDistributionTest.testDensities(org.apache.commons.math.distribution.PascalDistributionTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::binomialCoefficientDouble</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientDouble</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>276</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>58</index><block>12</block><killingTest>org.apache.commons.math.distribution.PascalDistributionTest.testDensities(org.apache.commons.math.distribution.PascalDistributionTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::binomialCoefficientDouble</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientDouble</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>284</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>95</index><block>17</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testLargeValues(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::binomialCoefficientDouble</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="5"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>318</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>37</index><block>8</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="2"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>326</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>50</index><block>12</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="2"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>330</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>64</index><block>16</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>340</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>88</index><block>20</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testMoreLargeValues(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>345</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>108</index><block>24</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testMoreLargeValues(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>340</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>99</index><block>22</block><killingTest /><description>Changed increment from 1 to -1</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>345</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>119</index><block>26</block><killingTest /><description>Changed increment from 1 to -1</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="5"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>310</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>25</index><block>5</block><killingTest /><description>Replaced integer subtraction with addition</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="2"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>330</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>63</index><block>16</block><killingTest /><description>Replaced integer division with multiplication</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>70</index><block>17</block><killingTest /><description>Replaced integer subtraction with addition</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>340</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>81</index><block>19</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testMoreLargeValues(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>Replaced integer subtraction with addition</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>340</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>83</index><block>19</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testMoreLargeValues(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>341</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>95</index><block>22</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testMoreLargeValues(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>Replaced double addition with subtraction</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>346</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>115</index><block>26</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testMoreLargeValues(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>Replaced double subtraction with addition</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>307</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><block>1</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testCumulativeProbabilities(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>307</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><block>2</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testCumulativeProbabilities(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>310</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>21</index><block>4</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testCumulativeProbabilities(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>310</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><block>5</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testCumulativeProbabilities(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="4"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>318</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>37</index><block>8</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testMoreLargeValues(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>326</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>50</index><block>12</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testMoreLargeValues(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>330</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>64</index><block>16</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>340</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>88</index><block>20</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testMoreLargeValues(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>345</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>108</index><block>24</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testMoreLargeValues(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="5"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>306</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><block>0</block><killingTest /><description>removed call to org/apache/commons/math/util/MathUtils::checkBinomial</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>311</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>32</index><block>7</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testCumulativeProbabilities(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::binomialCoefficientLog</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>319</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>45</index><block>11</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testCumulativeProbabilities(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::binomialCoefficientLog</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>327</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>57</index><block>15</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testLargeValues(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::binomialCoefficientLog</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>72</index><block>18</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::binomialCoefficientLog</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>binomialCoefficientLog</mutatedMethod><methodDescription>(II)D</methodDescription><lineNumber>349</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>124</index><block>27</block><killingTest>org.apache.commons.math.distribution.HypergeometricDistributionTest.testMoreLargeValues(org.apache.commons.math.distribution.HypergeometricDistributionTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::binomialCoefficientLog</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>checkBinomial</mutatedMethod><methodDescription>(II)V</methodDescription><lineNumber>360</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>5</index><block>0</block><killingTest>org.apache.commons.math.distribution.PascalDistributionTest.testDensities(org.apache.commons.math.distribution.PascalDistributionTest)</killingTest><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="8"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>checkBinomial</mutatedMethod><methodDescription>(II)V</methodDescription><lineNumber>365</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>26</index><block>5</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>checkBinomial</mutatedMethod><methodDescription>(II)V</methodDescription><lineNumber>360</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>0</block><killingTest>org.apache.commons.math.distribution.PascalDistributionTest.testDensities(org.apache.commons.math.distribution.PascalDistributionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>checkBinomial</mutatedMethod><methodDescription>(II)V</methodDescription><lineNumber>365</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><block>5</block><killingTest>org.apache.commons.math.distribution.PascalDistributionTest.testDensities(org.apache.commons.math.distribution.PascalDistributionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="19"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>compareTo</mutatedMethod><methodDescription>(DDD)I</methodDescription><lineNumber>385</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>17</index><block>3</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>compareTo</mutatedMethod><methodDescription>(DDD)I</methodDescription><lineNumber>383</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><block>1</block><killingTest>org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath286(org.apache.commons.math.optimization.linear.SimplexSolverTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>compareTo</mutatedMethod><methodDescription>(DDD)I</methodDescription><lineNumber>385</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><block>3</block><killingTest>org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath286(org.apache.commons.math.optimization.linear.SimplexSolverTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>compareTo</mutatedMethod><methodDescription>(DDD)I</methodDescription><lineNumber>386</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>21</index><block>4</block><killingTest>org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath286(org.apache.commons.math.optimization.linear.SimplexSolverTest)</killingTest><description>replaced int return with 0 for org/apache/commons/math/util/MathUtils::compareTo</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>compareTo</mutatedMethod><methodDescription>(DDD)I</methodDescription><lineNumber>388</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>25</index><block>5</block><killingTest>org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath286(org.apache.commons.math.optimization.linear.SimplexSolverTest)</killingTest><description>replaced int return with 0 for org/apache/commons/math/util/MathUtils::compareTo</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>cosh</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>399</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>6</index><block>1</block><killingTest>org.apache.commons.math.complex.ComplexTest.testCos(org.apache.commons.math.complex.ComplexTest)</killingTest><description>removed negation</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>cosh</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>399</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>8</index><block>2</block><killingTest>org.apache.commons.math.complex.ComplexTest.testCos(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double addition with subtraction</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>cosh</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>399</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>10</index><block>2</block><killingTest>org.apache.commons.math.complex.ComplexTest.testCos(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double division with multiplication</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>cosh</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>399</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>11</index><block>2</block><killingTest>org.apache.commons.math.complex.ComplexTest.testCos(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::cosh</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>distance</mutatedMethod><methodDescription>([D[D)D</methodDescription><lineNumber>1609</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>13</index><block>1</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>distance</mutatedMethod><methodDescription>([D[D)D</methodDescription><lineNumber>1610</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>22</index><block>2</block><killingTest /><description>Replaced double subtraction with addition</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>distance</mutatedMethod><methodDescription>([D[D)D</methodDescription><lineNumber>1611</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>29</index><block>2</block><killingTest /><description>Replaced double multiplication with division</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>distance</mutatedMethod><methodDescription>([D[D)D</methodDescription><lineNumber>1611</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>30</index><block>2</block><killingTest /><description>Replaced double addition with subtraction</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>distance</mutatedMethod><methodDescription>([D[D)D</methodDescription><lineNumber>1609</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><block>1</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>distance</mutatedMethod><methodDescription>([D[D)D</methodDescription><lineNumber>1613</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>40</index><block>4</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::distance</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>distance</mutatedMethod><methodDescription>([I[I)D</methodDescription><lineNumber>1625</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>13</index><block>1</block><killingTest>org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest.testDistance(org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest)</killingTest><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>distance</mutatedMethod><methodDescription>([I[I)D</methodDescription><lineNumber>1626</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>22</index><block>2</block><killingTest>org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest.testDistance(org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest)</killingTest><description>Replaced integer subtraction with addition</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>distance</mutatedMethod><methodDescription>([I[I)D</methodDescription><lineNumber>1627</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>30</index><block>2</block><killingTest>org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest.testDistance(org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>distance</mutatedMethod><methodDescription>([I[I)D</methodDescription><lineNumber>1627</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>31</index><block>2</block><killingTest>org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest.testDistance(org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest)</killingTest><description>Replaced double addition with subtraction</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>distance</mutatedMethod><methodDescription>([I[I)D</methodDescription><lineNumber>1625</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><block>1</block><killingTest>org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest.testDistance(org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>distance</mutatedMethod><methodDescription>([I[I)D</methodDescription><lineNumber>1629</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>41</index><block>4</block><killingTest>org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest.testDistance(org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::distance</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>distance1</mutatedMethod><methodDescription>([D[D)D</methodDescription><lineNumber>1579</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>13</index><block>1</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>distance1</mutatedMethod><methodDescription>([D[D)D</methodDescription><lineNumber>1580</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>23</index><block>2</block><killingTest /><description>Replaced double subtraction with addition</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>distance1</mutatedMethod><methodDescription>([D[D)D</methodDescription><lineNumber>1580</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>25</index><block>3</block><killingTest /><description>Replaced double addition with subtraction</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>distance1</mutatedMethod><methodDescription>([D[D)D</methodDescription><lineNumber>1579</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><block>1</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>distance1</mutatedMethod><methodDescription>([D[D)D</methodDescription><lineNumber>1582</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>34</index><block>4</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::distance1</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>distance1</mutatedMethod><methodDescription>([I[I)I</methodDescription><lineNumber>1594</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>13</index><block>1</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>distance1</mutatedMethod><methodDescription>([I[I)I</methodDescription><lineNumber>1594</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>29</index><block>3</block><killingTest /><description>Changed increment from 1 to -1</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>distance1</mutatedMethod><methodDescription>([I[I)I</methodDescription><lineNumber>1595</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>23</index><block>2</block><killingTest /><description>Replaced integer subtraction with addition</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>distance1</mutatedMethod><methodDescription>([I[I)I</methodDescription><lineNumber>1595</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>25</index><block>3</block><killingTest /><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>distance1</mutatedMethod><methodDescription>([I[I)I</methodDescription><lineNumber>1594</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><block>1</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>distance1</mutatedMethod><methodDescription>([I[I)I</methodDescription><lineNumber>1597</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>34</index><block>4</block><killingTest /><description>replaced int return with 0 for org/apache/commons/math/util/MathUtils::distance1</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>distanceInf</mutatedMethod><methodDescription>([D[D)D</methodDescription><lineNumber>1641</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>13</index><block>1</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>distanceInf</mutatedMethod><methodDescription>([D[D)D</methodDescription><lineNumber>1642</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>23</index><block>2</block><killingTest /><description>Replaced double subtraction with addition</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>distanceInf</mutatedMethod><methodDescription>([D[D)D</methodDescription><lineNumber>1641</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><block>1</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>distanceInf</mutatedMethod><methodDescription>([D[D)D</methodDescription><lineNumber>1644</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>34</index><block>5</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::distanceInf</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>distanceInf</mutatedMethod><methodDescription>([I[I)I</methodDescription><lineNumber>1656</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>13</index><block>1</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>distanceInf</mutatedMethod><methodDescription>([I[I)I</methodDescription><lineNumber>1656</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>29</index><block>4</block><killingTest /><description>Changed increment from 1 to -1</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>distanceInf</mutatedMethod><methodDescription>([I[I)I</methodDescription><lineNumber>1657</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>23</index><block>2</block><killingTest /><description>Replaced integer subtraction with addition</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>distanceInf</mutatedMethod><methodDescription>([I[I)I</methodDescription><lineNumber>1656</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><block>1</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>distanceInf</mutatedMethod><methodDescription>([I[I)I</methodDescription><lineNumber>1659</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>34</index><block>5</block><killingTest /><description>replaced int return with 0 for org/apache/commons/math/util/MathUtils::distanceInf</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(DD)Z</methodDescription><lineNumber>411</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTest>org.apache.commons.math.stat.descriptive.moment.FirstMomentTest.testSerial(org.apache.commons.math.stat.descriptive.moment.FirstMomentTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(DD)Z</methodDescription><lineNumber>411</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><block>3</block><killingTest>org.apache.commons.math.stat.descriptive.moment.FirstMomentTest.testSerial(org.apache.commons.math.stat.descriptive.moment.FirstMomentTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(DD)Z</methodDescription><lineNumber>411</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><block>4</block><killingTest>org.apache.commons.math.stat.descriptive.moment.FirstMomentTest.testSerial(org.apache.commons.math.stat.descriptive.moment.FirstMomentTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="5"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(DD)Z</methodDescription><lineNumber>411</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.BooleanTrueReturnValsMutator</mutator><index>20</index><block>7</block><killingTest>org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath286(org.apache.commons.math.optimization.linear.SimplexSolverTest)</killingTest><description>replaced boolean return with true for org/apache/commons/math/util/MathUtils::equals</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="19"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(DDD)Z</methodDescription><lineNumber>427</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>13</index><block>3</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="12"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(DDD)Z</methodDescription><lineNumber>427</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>9</index><block>2</block><killingTest>org.apache.commons.math.optimization.linear.SimplexSolverTest.testSingleVariableAndConstraint(org.apache.commons.math.optimization.linear.SimplexSolverTest)</killingTest><description>Replaced double subtraction with addition</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(DDD)Z</methodDescription><lineNumber>427</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>1</block><killingTest>org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath286(org.apache.commons.math.optimization.linear.SimplexSolverTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(DDD)Z</methodDescription><lineNumber>427</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><block>3</block><killingTest>org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath286(org.apache.commons.math.optimization.linear.SimplexSolverTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(DDD)Z</methodDescription><lineNumber>427</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.BooleanTrueReturnValsMutator</mutator><index>20</index><block>6</block><killingTest>org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath286(org.apache.commons.math.optimization.linear.SimplexSolverTest)</killingTest><description>replaced boolean return with true for org/apache/commons/math/util/MathUtils::equals</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(DDI)Z</methodDescription><lineNumber>453</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>30</index><block>7</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(DDI)Z</methodDescription><lineNumber>456</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>42</index><block>9</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(DDI)Z</methodDescription><lineNumber>460</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>58</index><block>12</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(DDI)Z</methodDescription><lineNumber>454</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>35</index><block>8</block><killingTest /><description>Replaced long subtraction with addition</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(DDI)Z</methodDescription><lineNumber>457</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>47</index><block>10</block><killingTest /><description>Replaced long subtraction with addition</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(DDI)Z</methodDescription><lineNumber>460</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>53</index><block>11</block><killingTest /><description>Replaced long subtraction with addition</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(DDI)Z</methodDescription><lineNumber>453</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>30</index><block>7</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(DDI)Z</methodDescription><lineNumber>456</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>42</index><block>9</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(DDI)Z</methodDescription><lineNumber>460</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>58</index><block>12</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(DDI)Z</methodDescription><lineNumber>460</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.BooleanTrueReturnValsMutator</mutator><index>64</index><block>15</block><killingTest /><description>replaced boolean return with true for org/apache/commons/math/util/MathUtils::equals</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>([D[D)Z</methodDescription><lineNumber>480</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>50</index><block>15</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>([D[D)Z</methodDescription><lineNumber>475</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>23</index><block>8</block><killingTest /><description>Replaced XOR with AND</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>([D[D)Z</methodDescription><lineNumber>474</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>([D[D)Z</methodDescription><lineNumber>474</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>1</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>([D[D)Z</methodDescription><lineNumber>475</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><block>2</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>([D[D)Z</methodDescription><lineNumber>475</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><block>5</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>([D[D)Z</methodDescription><lineNumber>475</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>24</index><block>8</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>([D[D)Z</methodDescription><lineNumber>477</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>37</index><block>12</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>([D[D)Z</methodDescription><lineNumber>480</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>50</index><block>15</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>([D[D)Z</methodDescription><lineNumber>481</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>60</index><block>17</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>([D[D)Z</methodDescription><lineNumber>485</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.BooleanFalseReturnValsMutator</mutator><index>72</index><block>20</block><killingTest /><description>replaced boolean return with false for org/apache/commons/math/util/MathUtils::equals</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>([D[D)Z</methodDescription><lineNumber>475</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.BooleanTrueReturnValsMutator</mutator><index>30</index><block>11</block><killingTest /><description>replaced boolean return with true for org/apache/commons/math/util/MathUtils::equals</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>([D[D)Z</methodDescription><lineNumber>478</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.BooleanTrueReturnValsMutator</mutator><index>41</index><block>13</block><killingTest /><description>replaced boolean return with true for org/apache/commons/math/util/MathUtils::equals</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>([D[D)Z</methodDescription><lineNumber>482</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.BooleanTrueReturnValsMutator</mutator><index>64</index><block>18</block><killingTest /><description>replaced boolean return with true for org/apache/commons/math/util/MathUtils::equals</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>factorial</mutatedMethod><methodDescription>(I)J</methodDescription><lineNumber>511</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>4</index><block>0</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>factorial</mutatedMethod><methodDescription>(I)J</methodDescription><lineNumber>516</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>21</index><block>4</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>factorial</mutatedMethod><methodDescription>(I)J</methodDescription><lineNumber>511</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>factorial</mutatedMethod><methodDescription>(I)J</methodDescription><lineNumber>516</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>21</index><block>4</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>factorial</mutatedMethod><methodDescription>(I)J</methodDescription><lineNumber>520</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>34</index><block>7</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/util/MathUtils::factorial</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>factorialDouble</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>544</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>4</index><block>0</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>factorialDouble</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>549</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>21</index><block>4</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>factorialDouble</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>552</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>34</index><block>9</block><killingTest /><description>Replaced double addition with subtraction</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>factorialDouble</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>544</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>factorialDouble</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>549</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>21</index><block>4</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>factorialDouble</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>550</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>27</index><block>6</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::factorialDouble</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>factorialDouble</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>552</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>36</index><block>10</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::factorialDouble</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>factorialLog</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>569</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>4</index><block>0</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>factorialLog</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>574</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>21</index><block>4</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>factorialLog</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>578</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>40</index><block>9</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>factorialLog</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>578</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>51</index><block>11</block><killingTest /><description>Changed increment from 1 to -1</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>factorialLog</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>579</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>47</index><block>11</block><killingTest /><description>Replaced double addition with subtraction</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>factorialLog</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>569</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>factorialLog</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>574</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>21</index><block>4</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>factorialLog</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>578</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>40</index><block>9</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>factorialLog</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>575</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>28</index><block>7</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::factorialLog</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>factorialLog</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>581</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>56</index><block>12</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::factorialLog</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="48"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>630</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>51</index><block>11</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="48"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>633</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>60</index><block>13</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="9"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>638</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>82</index><block>18</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="48"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>661</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>153</index><block>31</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>642</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>97</index><block>19</block><killingTest>org.apache.commons.math.fraction.FractionTest.testMultiply(org.apache.commons.math.fraction.FractionTest)</killingTest><description>Changed increment from 1 to -1</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>631</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>55</index><block>12</block><killingTest /><description>removed negation</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>634</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>64</index><block>14</block><killingTest /><description>removed negation</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="4"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>651</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>134</index><block>27</block><killingTest>org.apache.commons.math.fraction.FractionTest.testMultiply(org.apache.commons.math.fraction.FractionTest)</killingTest><description>removed negation</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>662</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>157</index><block>32</block><killingTest /><description>removed negation</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="15"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>671</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>179</index><block>35</block><killingTest>org.apache.commons.math.fraction.FractionTest.testMultiply(org.apache.commons.math.fraction.FractionTest)</killingTest><description>removed negation</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="2"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>623</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>46</index><block>10</block><killingTest>org.apache.commons.math.fraction.FractionTest.testEqualsAndHashCode(org.apache.commons.math.fraction.FractionTest)</killingTest><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="15"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>638</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>74</index><block>16</block><killingTest>org.apache.commons.math.fraction.FractionTest.testMultiply(org.apache.commons.math.fraction.FractionTest)</killingTest><description>Replaced bitwise AND with OR</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="4"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>638</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>78</index><block>17</block><killingTest>org.apache.commons.math.fraction.FractionTest.testMultiply(org.apache.commons.math.fraction.FractionTest)</killingTest><description>Replaced bitwise AND with OR</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="3"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>640</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>87</index><block>19</block><killingTest>org.apache.commons.math.fraction.FractionTest.testConstructor(org.apache.commons.math.fraction.FractionTest)</killingTest><description>Replaced integer division with multiplication</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="9"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>641</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>93</index><block>19</block><killingTest /><description>Replaced integer division with multiplication</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>651</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>125</index><block>25</block><killingTest /><description>Replaced bitwise AND with OR</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>651</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>133</index><block>27</block><killingTest /><description>Replaced integer division with multiplication</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="4"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>657</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>141</index><block>29</block><killingTest>org.apache.commons.math.fraction.FractionFormatTest.testParseInteger(org.apache.commons.math.fraction.FractionFormatTest)</killingTest><description>Replaced bitwise AND with OR</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>658</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>147</index><block>30</block><killingTest /><description>Replaced integer division with multiplication</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>667</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>168</index><block>34</block><killingTest /><description>Replaced integer subtraction with addition</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>667</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>170</index><block>34</block><killingTest /><description>Replaced integer division with multiplication</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="15"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>671</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>182</index><block>35</block><killingTest>org.apache.commons.math.fraction.FractionTest.testMultiply(org.apache.commons.math.fraction.FractionTest)</killingTest><description>Replaced Shift Left with Shift Right</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="15"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>671</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>183</index><block>35</block><killingTest>org.apache.commons.math.fraction.FractionTest.testMultiply(org.apache.commons.math.fraction.FractionTest)</killingTest><description>Replaced integer multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>617</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><block>0</block><killingTest>org.apache.commons.math.fraction.FractionFormatTest.testFormat(org.apache.commons.math.fraction.FractionFormatTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>617</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><block>1</block><killingTest>org.apache.commons.math.fraction.FractionFormatTest.testFormat(org.apache.commons.math.fraction.FractionFormatTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>618</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>19</index><block>2</block><killingTest>org.apache.commons.math.fraction.FractionFormatTest.testFormatZero(org.apache.commons.math.fraction.FractionFormatTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>618</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>22</index><block>3</block><killingTest>org.apache.commons.math.fraction.FractionFormatTest.testFormatZero(org.apache.commons.math.fraction.FractionFormatTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>630</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>51</index><block>11</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>633</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>60</index><block>13</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>638</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>75</index><block>16</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>638</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>79</index><block>17</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>638</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>82</index><block>18</block><killingTest>org.apache.commons.math.fraction.FractionTest.testMultiply(org.apache.commons.math.fraction.FractionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>644</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>103</index><block>20</block><killingTest>org.apache.commons.math.fraction.FractionFormatTest.testFormat(org.apache.commons.math.fraction.FractionFormatTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>651</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>127</index><block>25</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>657</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>142</index><block>29</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>661</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>153</index><block>31</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>670</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>175</index><block>34</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="2"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>623</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>47</index><block>10</block><killingTest>org.apache.commons.math.fraction.FractionTest.testEqualsAndHashCode(org.apache.commons.math.fraction.FractionTest)</killingTest><description>replaced int return with 0 for org/apache/commons/math/util/MathUtils::gcd</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="15"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>gcd</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>671</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>184</index><block>35</block><killingTest>org.apache.commons.math.fraction.FractionTest.testMultiply(org.apache.commons.math.fraction.FractionTest)</killingTest><description>replaced int return with 0 for org/apache/commons/math/util/MathUtils::gcd</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>hash</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>681</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>8</index><block>2</block><killingTest>org.apache.commons.math.complex.ComplexTest.testHashCode(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced int return with 0 for org/apache/commons/math/util/MathUtils::hash</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="2"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>hash</mutatedMethod><methodDescription>([D)I</methodDescription><lineNumber>692</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>5</index><block>1</block><killingTest /><description>replaced int return with 0 for org/apache/commons/math/util/MathUtils::hash</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(B)B</methodDescription><lineNumber>703</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>4</index><block>0</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(B)B</methodDescription><lineNumber>703</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(B)B</methodDescription><lineNumber>703</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>10</index><block>3</block><killingTest /><description>replaced byte return with 0 for org/apache/commons/math/util/MathUtils::indicator</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="3"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>718</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>15</index><block>3</block><killingTest>org.apache.commons.math.complex.ComplexTest.testSqrtImaginaryZero(org.apache.commons.math.complex.ComplexTest)</killingTest><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="3"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>715</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTest>org.apache.commons.math.complex.ComplexTest.testSqrtImaginaryZero(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="3"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>718</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><block>3</block><killingTest>org.apache.commons.math.complex.ComplexTest.testSqrtImaginaryZero(org.apache.commons.math.complex.ComplexTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>716</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>9</index><block>2</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::indicator</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="3"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>718</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>21</index><block>6</block><killingTest>org.apache.commons.math.complex.ComplexTest.testSqrtImaginaryZero(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::indicator</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(F)F</methodDescription><lineNumber>732</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>15</index><block>3</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(F)F</methodDescription><lineNumber>729</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(F)F</methodDescription><lineNumber>732</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><block>3</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(F)F</methodDescription><lineNumber>730</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>9</index><block>2</block><killingTest /><description>replaced float return with 0.0f for org/apache/commons/math/util/MathUtils::indicator</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(F)F</methodDescription><lineNumber>732</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>21</index><block>6</block><killingTest /><description>replaced float return with 0.0f for org/apache/commons/math/util/MathUtils::indicator</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>742</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>4</index><block>0</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>742</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>742</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>10</index><block>3</block><killingTest /><description>replaced int return with 0 for org/apache/commons/math/util/MathUtils::indicator</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>752</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><block>0</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>752</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>752</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>12</index><block>3</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/util/MathUtils::indicator</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(S)S</methodDescription><lineNumber>763</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>4</index><block>0</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(S)S</methodDescription><lineNumber>763</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>indicator</mutatedMethod><methodDescription>(S)S</methodDescription><lineNumber>763</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>10</index><block>3</block><killingTest /><description>replaced short return with 0 for org/apache/commons/math/util/MathUtils::indicator</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>lcm</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>793</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>17</index><block>4</block><killingTest /><description>Replaced integer division with multiplication</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>lcm</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>790</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>lcm</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>790</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>1</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>lcm</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>794</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><block>6</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>lcm</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>797</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>37</index><block>9</block><killingTest /><description>replaced int return with 0 for org/apache/commons/math/util/MathUtils::lcm</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>817</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>7</index><block>2</block><killingTest /><description>Replaced double division with multiplication</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>817</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>8</index><block>2</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::log</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>832</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>14</index><block>0</block><killingTest>org.apache.commons.math.fraction.FractionTest.testMultiply(org.apache.commons.math.fraction.FractionTest)</killingTest><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="3"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>832</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>18</index><block>1</block><killingTest>org.apache.commons.math.fraction.FractionTest.testSubtract(org.apache.commons.math.fraction.FractionTest)</killingTest><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>831</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>7</index><block>0</block><killingTest>org.apache.commons.math.fraction.FractionTest.testMultiply(org.apache.commons.math.fraction.FractionTest)</killingTest><description>Replaced long multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>832</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><block>0</block><killingTest>org.apache.commons.math.fraction.FractionTest.testMultiply(org.apache.commons.math.fraction.FractionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>832</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>18</index><block>1</block><killingTest>org.apache.commons.math.fraction.FractionTest.testMultiply(org.apache.commons.math.fraction.FractionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>835</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>30</index><block>4</block><killingTest>org.apache.commons.math.fraction.FractionTest.testMultiply(org.apache.commons.math.fraction.FractionTest)</killingTest><description>replaced int return with 0 for org/apache/commons/math/util/MathUtils::mulAndCheck</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>851</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>10</index><block>0</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>855</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>24</index><block>3</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>856</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>30</index><block>4</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>858</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>38</index><block>5</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>863</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>59</index><block>9</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>865</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>67</index><block>10</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>875</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>94</index><block>15</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>880</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>102</index><block>16</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>858</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>36</index><block>5</block><killingTest /><description>Replaced long division with multiplication</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>859</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>43</index><block>6</block><killingTest /><description>Replaced long multiplication with division</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>865</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>64</index><block>10</block><killingTest /><description>Replaced long division with multiplication</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>866</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>72</index><block>11</block><killingTest /><description>Replaced long multiplication with division</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>880</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>100</index><block>16</block><killingTest /><description>Replaced long division with multiplication</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>881</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>107</index><block>17</block><killingTest /><description>Replaced long multiplication with division</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>851</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>855</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>24</index><block>3</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>856</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>30</index><block>4</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>858</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>38</index><block>5</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>863</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>59</index><block>9</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>865</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>67</index><block>10</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>875</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>94</index><block>15</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>880</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>102</index><block>16</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>mulAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>890</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>125</index><block>21</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/util/MathUtils::mulAndCheck</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>916</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>24</index><block>6</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>927</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>63</index><block>11</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>923</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>40</index><block>11</block><killingTest /><description>Replaced bitwise AND with OR</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>924</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>46</index><block>11</block><killingTest /><description>Replaced bitwise AND with OR</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>925</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>52</index><block>11</block><killingTest /><description>Replaced bitwise AND with OR</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>927</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>59</index><block>11</block><killingTest /><description>Replaced double subtraction with addition</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>927</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>60</index><block>11</block><killingTest /><description>Replaced double multiplication with division</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>930</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>75</index><block>13</block><killingTest /><description>Replaced long addition with subtraction</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>930</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>76</index><block>13</block><killingTest /><description>Replaced bitwise OR with AND</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>933</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>83</index><block>15</block><killingTest /><description>Replaced bitwise OR with AND</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>933</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>86</index><block>15</block><killingTest /><description>Replaced long addition with subtraction</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>933</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>87</index><block>15</block><killingTest /><description>Replaced bitwise OR with AND</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>939</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>101</index><block>18</block><killingTest /><description>Replaced long subtraction with addition</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>939</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>102</index><block>18</block><killingTest /><description>Replaced bitwise OR with AND</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>939</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>104</index><block>18</block><killingTest /><description>Replaced bitwise OR with AND</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>943</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>111</index><block>20</block><killingTest /><description>Replaced bitwise OR with AND</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>943</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>114</index><block>20</block><killingTest /><description>Replaced long subtraction with addition</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>943</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>115</index><block>20</block><killingTest /><description>Replaced bitwise OR with AND</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>913</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>913</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><block>3</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>915</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>18</index><block>5</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>916</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>24</index><block>6</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>927</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>63</index><block>11</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>929</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>69</index><block>12</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>938</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>95</index><block>17</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>914</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>12</index><block>4</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::nextAfter</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>916</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>30</index><block>9</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::nextAfter</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>930</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>78</index><block>14</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::nextAfter</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>933</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>89</index><block>16</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::nextAfter</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>939</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>106</index><block>19</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::nextAfter</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>nextAfter</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>943</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>117</index><block>21</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::nextAfter</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>normalizeAngle</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>997</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>7</index><block>0</block><killingTest>org.apache.commons.math.geometry.RotationTest.testAxisAngle(org.apache.commons.math.geometry.RotationTest)</killingTest><description>Replaced double addition with subtraction</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>normalizeAngle</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>997</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>9</index><block>0</block><killingTest>org.apache.commons.math.geometry.RotationTest.testAxisAngle(org.apache.commons.math.geometry.RotationTest)</killingTest><description>Replaced double subtraction with addition</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>normalizeAngle</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>997</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>11</index><block>0</block><killingTest>org.apache.commons.math.geometry.RotationTest.testAxisAngle(org.apache.commons.math.geometry.RotationTest)</killingTest><description>Replaced double division with multiplication</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>normalizeAngle</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>997</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>13</index><block>1</block><killingTest>org.apache.commons.math.geometry.RotationTest.testAxisAngle(org.apache.commons.math.geometry.RotationTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="8"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>normalizeAngle</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>997</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>14</index><block>1</block><killingTest>org.apache.commons.math.optimization.fitting.HarmonicFitterTest.testNoError(org.apache.commons.math.optimization.fitting.HarmonicFitterTest)</killingTest><description>Replaced double subtraction with addition</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>normalizeAngle</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>997</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>15</index><block>1</block><killingTest>org.apache.commons.math.geometry.RotationTest.testAxisAngle(org.apache.commons.math.geometry.RotationTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::normalizeAngle</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>normalizeArray</mutatedMethod><methodDescription>([DD)[D</methodDescription><lineNumber>1033</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>46</index><block>9</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>normalizeArray</mutatedMethod><methodDescription>([DD)[D</methodDescription><lineNumber>1046</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>112</index><block>24</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>normalizeArray</mutatedMethod><methodDescription>([DD)[D</methodDescription><lineNumber>1033</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>90</index><block>19</block><killingTest /><description>Changed increment from 1 to -1</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>normalizeArray</mutatedMethod><methodDescription>([DD)[D</methodDescription><lineNumber>1046</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>141</index><block>29</block><killingTest /><description>Changed increment from 1 to -1</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>normalizeArray</mutatedMethod><methodDescription>([DD)[D</methodDescription><lineNumber>1039</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>86</index><block>18</block><killingTest /><description>Replaced double addition with subtraction</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>normalizeArray</mutatedMethod><methodDescription>([DD)[D</methodDescription><lineNumber>1050</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>135</index><block>28</block><killingTest /><description>Replaced double multiplication with division</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>normalizeArray</mutatedMethod><methodDescription>([DD)[D</methodDescription><lineNumber>1050</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>137</index><block>28</block><killingTest /><description>Replaced double division with multiplication</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>normalizeArray</mutatedMethod><methodDescription>([DD)[D</methodDescription><lineNumber>1022</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>normalizeArray</mutatedMethod><methodDescription>([DD)[D</methodDescription><lineNumber>1026</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><block>5</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>normalizeArray</mutatedMethod><methodDescription>([DD)[D</methodDescription><lineNumber>1033</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>46</index><block>9</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>normalizeArray</mutatedMethod><methodDescription>([DD)[D</methodDescription><lineNumber>1034</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>53</index><block>11</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>normalizeArray</mutatedMethod><methodDescription>([DD)[D</methodDescription><lineNumber>1038</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>79</index><block>17</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>normalizeArray</mutatedMethod><methodDescription>([DD)[D</methodDescription><lineNumber>1042</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>97</index><block>20</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>normalizeArray</mutatedMethod><methodDescription>([DD)[D</methodDescription><lineNumber>1046</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>112</index><block>24</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>normalizeArray</mutatedMethod><methodDescription>([DD)[D</methodDescription><lineNumber>1047</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>119</index><block>26</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>normalizeArray</mutatedMethod><methodDescription>([DD)[D</methodDescription><lineNumber>1053</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>146</index><block>30</block><killingTest /><description>replaced return value with null for org/apache/commons/math/util/MathUtils::normalizeArray</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>1380</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>4</index><block>0</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>1389</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>38</index><block>7</block><killingTest /><description>Replaced bitwise AND with OR</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>1390</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>44</index><block>8</block><killingTest /><description>Replaced integer multiplication with division</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>1392</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>50</index><block>9</block><killingTest /><description>Replaced integer multiplication with division</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>1393</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>56</index><block>9</block><killingTest /><description>Replaced Shift Right with Shift Left</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>1380</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>1388</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>33</index><block>6</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>1389</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>39</index><block>7</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>1396</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>62</index><block>10</block><killingTest /><description>replaced int return with 0 for org/apache/commons/math/util/MathUtils::pow</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(IJ)I</methodDescription><lineNumber>1410</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><block>0</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(IJ)I</methodDescription><lineNumber>1419</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>42</index><block>7</block><killingTest /><description>Replaced bitwise AND with OR</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(IJ)I</methodDescription><lineNumber>1420</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>50</index><block>8</block><killingTest /><description>Replaced integer multiplication with division</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(IJ)I</methodDescription><lineNumber>1422</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>56</index><block>9</block><killingTest /><description>Replaced integer multiplication with division</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(IJ)I</methodDescription><lineNumber>1423</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>62</index><block>9</block><killingTest /><description>Replaced Shift Right with Shift Left</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(IJ)I</methodDescription><lineNumber>1410</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(IJ)I</methodDescription><lineNumber>1418</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>37</index><block>6</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(IJ)I</methodDescription><lineNumber>1419</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>45</index><block>7</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(IJ)I</methodDescription><lineNumber>1426</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>68</index><block>10</block><killingTest /><description>replaced int return with 0 for org/apache/commons/math/util/MathUtils::pow</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(JI)J</methodDescription><lineNumber>1440</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>4</index><block>0</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(JI)J</methodDescription><lineNumber>1449</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>38</index><block>7</block><killingTest /><description>Replaced bitwise AND with OR</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(JI)J</methodDescription><lineNumber>1450</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>44</index><block>8</block><killingTest /><description>Replaced long multiplication with division</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(JI)J</methodDescription><lineNumber>1452</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>50</index><block>9</block><killingTest /><description>Replaced long multiplication with division</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(JI)J</methodDescription><lineNumber>1453</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>56</index><block>9</block><killingTest /><description>Replaced Shift Right with Shift Left</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(JI)J</methodDescription><lineNumber>1440</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(JI)J</methodDescription><lineNumber>1448</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>33</index><block>6</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(JI)J</methodDescription><lineNumber>1449</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>39</index><block>7</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(JI)J</methodDescription><lineNumber>1456</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>62</index><block>10</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/util/MathUtils::pow</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>1470</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><block>0</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>1479</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>42</index><block>7</block><killingTest /><description>Replaced bitwise AND with OR</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>1480</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>50</index><block>8</block><killingTest /><description>Replaced long multiplication with division</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>1482</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>56</index><block>9</block><killingTest /><description>Replaced long multiplication with division</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>1483</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>62</index><block>9</block><killingTest /><description>Replaced Shift Right with Shift Left</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>1470</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>1478</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>37</index><block>6</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>1479</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>45</index><block>7</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>1486</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>68</index><block>10</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/util/MathUtils::pow</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(Ljava/math/BigInteger;I)Ljava/math/BigInteger;</methodDescription><lineNumber>1500</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>4</index><block>0</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(Ljava/math/BigInteger;I)Ljava/math/BigInteger;</methodDescription><lineNumber>1500</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(Ljava/math/BigInteger;I)Ljava/math/BigInteger;</methodDescription><lineNumber>1506</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>26</index><block>5</block><killingTest /><description>replaced return value with null for org/apache/commons/math/util/MathUtils::pow</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(Ljava/math/BigInteger;J)Ljava/math/BigInteger;</methodDescription><lineNumber>1520</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><block>0</block><killingTest>org.apache.commons.math.fraction.BigFractionTest.testPow(org.apache.commons.math.fraction.BigFractionTest)</killingTest><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(Ljava/math/BigInteger;J)Ljava/math/BigInteger;</methodDescription><lineNumber>1529</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>41</index><block>6</block><killingTest>org.apache.commons.math.fraction.BigFractionTest.testPow(org.apache.commons.math.fraction.BigFractionTest)</killingTest><description>Replaced bitwise AND with OR</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(Ljava/math/BigInteger;J)Ljava/math/BigInteger;</methodDescription><lineNumber>1533</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>61</index><block>10</block><killingTest /><description>Replaced Shift Right with Shift Left</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(Ljava/math/BigInteger;J)Ljava/math/BigInteger;</methodDescription><lineNumber>1520</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>0</block><killingTest>org.apache.commons.math.fraction.BigFractionTest.testPow(org.apache.commons.math.fraction.BigFractionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(Ljava/math/BigInteger;J)Ljava/math/BigInteger;</methodDescription><lineNumber>1528</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>36</index><block>5</block><killingTest>org.apache.commons.math.fraction.BigFractionTest.testPow(org.apache.commons.math.fraction.BigFractionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(Ljava/math/BigInteger;J)Ljava/math/BigInteger;</methodDescription><lineNumber>1529</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>44</index><block>6</block><killingTest>org.apache.commons.math.fraction.BigFractionTest.testPow(org.apache.commons.math.fraction.BigFractionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(Ljava/math/BigInteger;J)Ljava/math/BigInteger;</methodDescription><lineNumber>1536</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>67</index><block>11</block><killingTest>org.apache.commons.math.fraction.BigFractionTest.testPow(org.apache.commons.math.fraction.BigFractionTest)</killingTest><description>replaced return value with null for org/apache/commons/math/util/MathUtils::pow</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;</methodDescription><lineNumber>1550</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><block>1</block><killingTest>org.apache.commons.math.fraction.BigFractionTest.testPow(org.apache.commons.math.fraction.BigFractionTest)</killingTest><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;</methodDescription><lineNumber>1550</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>1</block><killingTest>org.apache.commons.math.fraction.BigFractionTest.testPow(org.apache.commons.math.fraction.BigFractionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;</methodDescription><lineNumber>1558</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>35</index><block>6</block><killingTest>org.apache.commons.math.fraction.BigFractionTest.testPow(org.apache.commons.math.fraction.BigFractionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;</methodDescription><lineNumber>1559</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>41</index><block>8</block><killingTest>org.apache.commons.math.fraction.BigFractionTest.testPow(org.apache.commons.math.fraction.BigFractionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>pow</mutatedMethod><methodDescription>(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;</methodDescription><lineNumber>1566</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>64</index><block>14</block><killingTest>org.apache.commons.math.fraction.BigFractionTest.testPow(org.apache.commons.math.fraction.BigFractionTest)</killingTest><description>replaced return value with null for org/apache/commons/math/util/MathUtils::pow</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>round</mutatedMethod><methodDescription>(DI)D</methodDescription><lineNumber>1066</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>7</index><block>1</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::round</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>round</mutatedMethod><methodDescription>(DII)D</methodDescription><lineNumber>1088</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>21</index><block>6</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>round</mutatedMethod><methodDescription>(DII)D</methodDescription><lineNumber>1083</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>13</index><block>4</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::round</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>round</mutatedMethod><methodDescription>(DII)D</methodDescription><lineNumber>1089</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>25</index><block>7</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::round</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>round</mutatedMethod><methodDescription>(DII)D</methodDescription><lineNumber>1091</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>29</index><block>8</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::round</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>round</mutatedMethod><methodDescription>(FI)F</methodDescription><lineNumber>1106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>7</index><block>1</block><killingTest /><description>replaced float return with 0.0f for org/apache/commons/math/util/MathUtils::round</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>round</mutatedMethod><methodDescription>(FII)F</methodDescription><lineNumber>1123</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>14</index><block>2</block><killingTest /><description>Replaced float multiplication with division</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>round</mutatedMethod><methodDescription>(FII)F</methodDescription><lineNumber>1124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>20</index><block>2</block><killingTest /><description>Replaced float multiplication with division</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>round</mutatedMethod><methodDescription>(FII)F</methodDescription><lineNumber>1124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>28</index><block>3</block><killingTest /><description>Replaced float division with multiplication</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>round</mutatedMethod><methodDescription>(FII)F</methodDescription><lineNumber>1124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>29</index><block>3</block><killingTest /><description>replaced float return with 0.0f for org/apache/commons/math/util/MathUtils::round</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>roundUnscaled</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>1162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>81</index><block>20</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>roundUnscaled</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>1171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>108</index><block>26</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>roundUnscaled</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>1173</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>120</index><block>29</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>roundUnscaled</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>1189</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>172</index><block>42</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>roundUnscaled</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>1161</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>74</index><block>20</block><killingTest /><description>Replaced double subtraction with addition</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>roundUnscaled</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>1170</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>101</index><block>26</block><killingTest /><description>Replaced double subtraction with addition</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>roundUnscaled</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>1177</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>132</index><block>33</block><killingTest /><description>Replaced double division with multiplication</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>roundUnscaled</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>1177</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>136</index><block>34</block><killingTest /><description>Replaced double division with multiplication</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>roundUnscaled</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>1188</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>165</index><block>42</block><killingTest /><description>Replaced double subtraction with addition</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>roundUnscaled</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>1143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><block>1</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>roundUnscaled</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>1153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>44</index><block>11</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>roundUnscaled</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>1162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>81</index><block>20</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>roundUnscaled</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>1171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>108</index><block>26</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>roundUnscaled</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>1173</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>120</index><block>29</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>roundUnscaled</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>1177</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>139</index><block>35</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>roundUnscaled</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>1189</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>172</index><block>42</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>roundUnscaled</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>1197</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>193</index><block>48</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>roundUnscaled</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>1218</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>298</index><block>65</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::roundUnscaled</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>scalb</mutatedMethod><methodDescription>(DI)D</methodDescription><lineNumber>968</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>26</index><block>7</block><killingTest /><description>Replaced bitwise AND with OR</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>scalb</mutatedMethod><methodDescription>(DI)D</methodDescription><lineNumber>969</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>32</index><block>7</block><killingTest /><description>Replaced bitwise AND with OR</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>scalb</mutatedMethod><methodDescription>(DI)D</methodDescription><lineNumber>972</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>41</index><block>7</block><killingTest /><description>Replaced Shift Left with Shift Right</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>scalb</mutatedMethod><methodDescription>(DI)D</methodDescription><lineNumber>972</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>42</index><block>7</block><killingTest /><description>Replaced long addition with subtraction</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>scalb</mutatedMethod><methodDescription>(DI)D</methodDescription><lineNumber>972</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>43</index><block>7</block><killingTest /><description>Replaced bitwise OR with AND</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>scalb</mutatedMethod><methodDescription>(DI)D</methodDescription><lineNumber>962</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>scalb</mutatedMethod><methodDescription>(DI)D</methodDescription><lineNumber>962</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><block>2</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>scalb</mutatedMethod><methodDescription>(DI)D</methodDescription><lineNumber>962</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><block>4</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>scalb</mutatedMethod><methodDescription>(DI)D</methodDescription><lineNumber>963</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>16</index><block>5</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::scalb</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>scalb</mutatedMethod><methodDescription>(DI)D</methodDescription><lineNumber>973</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>49</index><block>8</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::scalb</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(B)B</methodDescription><lineNumber>1232</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>9</index><block>2</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(B)B</methodDescription><lineNumber>1232</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(B)B</methodDescription><lineNumber>1232</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><block>2</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(B)B</methodDescription><lineNumber>1232</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>15</index><block>5</block><killingTest /><description>replaced byte return with 0 for org/apache/commons/math/util/MathUtils::sign</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="6"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1251</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>22</index><block>5</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1248</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTest>org.apache.commons.math.analysis.solvers.MullerSolverTest.testExpm1Function(org.apache.commons.math.analysis.solvers.MullerSolverTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1251</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><block>3</block><killingTest>org.apache.commons.math.analysis.solvers.MullerSolverTest.testExpm1Function(org.apache.commons.math.analysis.solvers.MullerSolverTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="6"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1251</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>22</index><block>5</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1249</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>9</index><block>2</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::sign</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1251</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>28</index><block>8</block><killingTest>org.apache.commons.math.analysis.solvers.MullerSolverTest.testExpm1Function(org.apache.commons.math.analysis.solvers.MullerSolverTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::sign</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(F)F</methodDescription><lineNumber>1269</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>22</index><block>5</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(F)F</methodDescription><lineNumber>1266</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(F)F</methodDescription><lineNumber>1269</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><block>3</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(F)F</methodDescription><lineNumber>1269</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>22</index><block>5</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(F)F</methodDescription><lineNumber>1267</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>9</index><block>2</block><killingTest /><description>replaced float return with 0.0f for org/apache/commons/math/util/MathUtils::sign</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(F)F</methodDescription><lineNumber>1269</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>28</index><block>8</block><killingTest /><description>replaced float return with 0.0f for org/apache/commons/math/util/MathUtils::sign</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="2"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>1283</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>9</index><block>2</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>1283</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>0</block><killingTest>org.apache.commons.math.fraction.FractionFormatTest.testParseProper(org.apache.commons.math.fraction.FractionFormatTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>1283</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><block>2</block><killingTest>org.apache.commons.math.fraction.FractionFormatTest.testParseProper(org.apache.commons.math.fraction.FractionFormatTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>1283</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>15</index><block>5</block><killingTest>org.apache.commons.math.fraction.FractionFormatTest.testParseProper(org.apache.commons.math.fraction.FractionFormatTest)</killingTest><description>replaced int return with 0 for org/apache/commons/math/util/MathUtils::sign</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>1297</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>13</index><block>2</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>1297</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>1297</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><block>2</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>1297</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>19</index><block>5</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/util/MathUtils::sign</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(S)S</methodDescription><lineNumber>1312</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>9</index><block>2</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(S)S</methodDescription><lineNumber>1312</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(S)S</methodDescription><lineNumber>1312</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><block>2</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sign</mutatedMethod><methodDescription>(S)S</methodDescription><lineNumber>1312</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>15</index><block>5</block><killingTest /><description>replaced short return with 0 for org/apache/commons/math/util/MathUtils::sign</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sinh</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1323</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>6</index><block>1</block><killingTest>org.apache.commons.math.complex.ComplexTest.testCos(org.apache.commons.math.complex.ComplexTest)</killingTest><description>removed negation</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sinh</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1323</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>8</index><block>2</block><killingTest>org.apache.commons.math.complex.ComplexTest.testCos(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double subtraction with addition</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sinh</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1323</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>10</index><block>2</block><killingTest>org.apache.commons.math.complex.ComplexTest.testCos(org.apache.commons.math.complex.ComplexTest)</killingTest><description>Replaced double division with multiplication</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>sinh</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1323</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>11</index><block>2</block><killingTest>org.apache.commons.math.complex.ComplexTest.testCos(org.apache.commons.math.complex.ComplexTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/util/MathUtils::sinh</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="2"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>subAndCheck</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>1338</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>14</index><block>0</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="2"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>subAndCheck</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>1338</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>18</index><block>1</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>subAndCheck</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>1337</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>7</index><block>0</block><killingTest>org.apache.commons.math.fraction.FractionTest.testSubtract(org.apache.commons.math.fraction.FractionTest)</killingTest><description>Replaced long subtraction with addition</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>subAndCheck</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>1338</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><block>0</block><killingTest>org.apache.commons.math.fraction.FractionTest.testSubtract(org.apache.commons.math.fraction.FractionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>subAndCheck</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>1338</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>18</index><block>1</block><killingTest>org.apache.commons.math.fraction.FractionTest.testSubtract(org.apache.commons.math.fraction.FractionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>subAndCheck</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>1341</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>30</index><block>4</block><killingTest>org.apache.commons.math.fraction.FractionTest.testSubtract(org.apache.commons.math.fraction.FractionTest)</killingTest><description>replaced int return with 0 for org/apache/commons/math/util/MathUtils::subAndCheck</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>subAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>1358</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>16</index><block>1</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>subAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>1365</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>36</index><block>5</block><killingTest /><description>removed negation</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>subAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>1359</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>21</index><block>2</block><killingTest /><description>Replaced long subtraction with addition</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>subAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>1357</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>subAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>1358</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><block>1</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>subAndCheck</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>1367</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>43</index><block>7</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/util/MathUtils::subAndCheck</description></mutation>
</mutations>