<mutations>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(C)V</methodDescription><lineNumber>174</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><block>1</block><killingTest /><description>removed call to org/apache/commons/math/stat/Frequency::addValue</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><block>1</block><killingTest /><description>removed call to org/apache/commons/math/stat/Frequency::addValue</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>165</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><block>1</block><killingTest /><description>removed call to org/apache/commons/math/stat/Frequency::addValue</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>47</index><block>10</block><killingTest /><description>Replaced long addition with subtraction</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>125</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><block>5</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Integer;)V</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><block>2</block><killingTest /><description>removed call to org/apache/commons/math/stat/Frequency::addValue</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><block>0</block><killingTest /><description>removed call to org/apache/commons/math/stat/Frequency::addValue</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>clear</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><block>0</block><killingTest /><description>removed call to java/util/TreeMap::clear</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(C)J</methodDescription><lineNumber>261</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>7</index><block>2</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCount</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(I)J</methodDescription><lineNumber>241</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>8</index><block>2</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCount</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>251</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>7</index><block>2</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCount</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>219</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>225</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>29</index><block>5</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>220</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>13</index><block>3</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCount</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>231</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>44</index><block>10</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCount</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(C)J</methodDescription><lineNumber>401</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>7</index><block>2</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCumFreq</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(I)J</methodDescription><lineNumber>377</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>8</index><block>2</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCumFreq</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>389</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>7</index><block>2</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCumFreq</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>348</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>81</index><block>19</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>352</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>94</index><block>23</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>359</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>121</index><block>32</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>360</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>128</index><block>34</block><killingTest /><description>Replaced long addition with subtraction</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>327</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><block>1</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>330</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><block>3</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>334</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>34</index><block>8</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>341</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>57</index><block>12</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>348</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>81</index><block>19</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>352</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>94</index><block>23</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>357</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>109</index><block>29</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>359</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>121</index><block>32</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>24</index><block>6</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCumFreq</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>345</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>72</index><block>16</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCumFreq</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>353</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>99</index><block>25</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCumFreq</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>362</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>134</index><block>35</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCumFreq</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>365</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>141</index><block>37</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCumFreq</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(C)D</methodDescription><lineNumber>461</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>7</index><block>2</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/stat/Frequency::getCumPct</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>435</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>8</index><block>2</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/stat/Frequency::getCumPct</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>448</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>7</index><block>2</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/stat/Frequency::getCumPct</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>422</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>24</index><block>4</block><killingTest /><description>Replaced double division with multiplication</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>419</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><block>1</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>420</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>15</index><block>2</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/stat/Frequency::getCumPct</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>422</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>25</index><block>4</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/stat/Frequency::getCumPct</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(C)D</methodDescription><lineNumber>313</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>7</index><block>2</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/stat/Frequency::getPct</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>291</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>8</index><block>2</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/stat/Frequency::getPct</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>302</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>7</index><block>2</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/stat/Frequency::getPct</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>280</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>24</index><block>4</block><killingTest /><description>Replaced double division with multiplication</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>277</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><block>1</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>278</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>15</index><block>2</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/stat/Frequency::getPct</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>280</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>25</index><block>4</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/stat/Frequency::getPct</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>206</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>24</index><block>7</block><killingTest /><description>Replaced long addition with subtraction</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>205</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><block>4</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>30</index><block>8</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getSumFreq</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><block>7</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.EmptyObjectReturnValsMutator</mutator><index>99</index><block>24</block><killingTest /><description>replaced return value with "" for org/apache/commons/math/stat/Frequency::toString</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>valuesIterator</mutatedMethod><methodDescription>()Ljava/util/Iterator;</methodDescription><lineNumber>192</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>7</index><block>2</block><killingTest /><description>replaced return value with null for org/apache/commons/math/stat/Frequency::valuesIterator</description></mutation>
</mutations>