<mutations>
<mutation detected="true" status="KILLED" numberOfTestsRun="4"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>&lt;init&gt;</mutatedMethod><methodDescription>(DDD)V</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>10</index><block>1</block><killingTest>org.apache.commons.math.distribution.NormalDistributionTest.testPreconditions(org.apache.commons.math.distribution.NormalDistributionTest)</killingTest><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>&lt;init&gt;</mutatedMethod><methodDescription>(DDD)V</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><block>1</block><killingTest>org.apache.commons.math.distribution.NormalDistributionTest.testInverseCumulativeProbabilityExtremes(org.apache.commons.math.distribution.NormalDistributionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>17</index><block>1</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="1"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>23</index><block>2</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="3"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>125</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>6</index><block>0</block><killingTest>org.apache.commons.math.distribution.NormalDistributionTest.testCumulativeProbabilities(org.apache.commons.math.distribution.NormalDistributionTest)</killingTest><description>Replaced double subtraction with addition</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="6"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>15</index><block>1</block><killingTest>org.apache.commons.math.distribution.PoissonDistributionTest.testNormalApproximateProbability(org.apache.commons.math.distribution.PoissonDistributionTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>39</index><block>7</block><killingTest>org.apache.commons.math.distribution.NormalDistributionTest.testMath280(org.apache.commons.math.distribution.NormalDistributionTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>40</index><block>7</block><killingTest>org.apache.commons.math.distribution.NormalDistributionTest.testMath280(org.apache.commons.math.distribution.NormalDistributionTest)</killingTest><description>Replaced double division with multiplication</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>42</index><block>8</block><killingTest>org.apache.commons.math.distribution.NormalDistributionTest.testMath280(org.apache.commons.math.distribution.NormalDistributionTest)</killingTest><description>Replaced double addition with subtraction</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>43</index><block>8</block><killingTest>org.apache.commons.math.distribution.NormalDistributionTest.testMath280(org.apache.commons.math.distribution.NormalDistributionTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><block>1</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><block>2</block><killingTest>org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>29</index><block>5</block><killingTest>org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/distribution/NormalDistributionImpl::cumulativeProbability</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>44</index><block>8</block><killingTest>org.apache.commons.math.distribution.NormalDistributionTest.testMath280(org.apache.commons.math.distribution.NormalDistributionTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/distribution/NormalDistributionImpl::cumulativeProbability</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>density</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>6</index><block>0</block><killingTest>org.apache.commons.math.distribution.NormalDistributionTest.testDensities(org.apache.commons.math.distribution.NormalDistributionTest)</killingTest><description>Replaced double subtraction with addition</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>density</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>13</index><block>0</block><killingTest>org.apache.commons.math.distribution.NormalDistributionTest.testDensities(org.apache.commons.math.distribution.NormalDistributionTest)</killingTest><description>Replaced double division with multiplication</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>density</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>19</index><block>0</block><killingTest>org.apache.commons.math.distribution.NormalDistributionTest.testDensities(org.apache.commons.math.distribution.NormalDistributionTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>density</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>21</index><block>0</block><killingTest>org.apache.commons.math.distribution.NormalDistributionTest.testDensities(org.apache.commons.math.distribution.NormalDistributionTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>density</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>26</index><block>1</block><killingTest>org.apache.commons.math.distribution.NormalDistributionTest.testDensities(org.apache.commons.math.distribution.NormalDistributionTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>density</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>27</index><block>1</block><killingTest>org.apache.commons.math.distribution.NormalDistributionTest.testDensities(org.apache.commons.math.distribution.NormalDistributionTest)</killingTest><description>Replaced double division with multiplication</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>density</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>28</index><block>1</block><killingTest>org.apache.commons.math.distribution.NormalDistributionTest.testDensities(org.apache.commons.math.distribution.NormalDistributionTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/distribution/NormalDistributionImpl::density</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="3"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>getDomainLowerBound</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>194</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><block>0</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="2"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>getDomainLowerBound</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>194</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>0</block><killingTest>org.apache.commons.math.distribution.NormalDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math.distribution.NormalDistributionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>getDomainLowerBound</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>200</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>21</index><block>3</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/distribution/NormalDistributionImpl::getDomainLowerBound</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="3"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>getDomainUpperBound</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>215</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><block>0</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>getDomainUpperBound</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>215</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>0</block><killingTest>org.apache.commons.math.distribution.NormalDistributionTest.testMath280(org.apache.commons.math.distribution.NormalDistributionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>getDomainUpperBound</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>221</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>21</index><block>3</block><killingTest>org.apache.commons.math.distribution.NormalDistributionTest.testMath280(org.apache.commons.math.distribution.NormalDistributionTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/distribution/NormalDistributionImpl::getDomainUpperBound</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="3"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>getInitialDomain</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>236</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><block>0</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="SURVIVED" numberOfTestsRun="3"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>getInitialDomain</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>238</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>22</index><block>2</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>getInitialDomain</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>237</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>13</index><block>1</block><killingTest>org.apache.commons.math.distribution.NormalDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math.distribution.NormalDistributionTest)</killingTest><description>Replaced double subtraction with addition</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>getInitialDomain</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>239</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>29</index><block>3</block><killingTest>org.apache.commons.math.distribution.NormalDistributionTest.testMath280(org.apache.commons.math.distribution.NormalDistributionTest)</killingTest><description>Replaced double addition with subtraction</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>getInitialDomain</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>236</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>0</block><killingTest>org.apache.commons.math.distribution.NormalDistributionTest.testMath280(org.apache.commons.math.distribution.NormalDistributionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>getInitialDomain</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>238</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>22</index><block>2</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>getInitialDomain</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>244</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>41</index><block>5</block><killingTest>org.apache.commons.math.distribution.NormalDistributionTest.testMath280(org.apache.commons.math.distribution.NormalDistributionTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/distribution/NormalDistributionImpl::getInitialDomain</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>getMean</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>5</index><block>0</block><killingTest>org.apache.commons.math.distribution.NormalDistributionTest.testGetMean(org.apache.commons.math.distribution.NormalDistributionTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/distribution/NormalDistributionImpl::getMean</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="3"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>getSolverAbsoluteAccuracy</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>5</index><block>0</block><killingTest>org.apache.commons.math.distribution.NormalDistributionTest.testSampling(org.apache.commons.math.distribution.NormalDistributionTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/distribution/NormalDistributionImpl::getSolverAbsoluteAccuracy</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>getStandardDeviation</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>5</index><block>0</block><killingTest>org.apache.commons.math.distribution.NormalDistributionTest.testGetStandardDeviation(org.apache.commons.math.distribution.NormalDistributionTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/distribution/NormalDistributionImpl::getStandardDeviation</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>161</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>0</block><killingTest>org.apache.commons.math.distribution.NormalDistributionTest.testInverseCumulativeProbabilityExtremes(org.apache.commons.math.distribution.NormalDistributionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="TIMED_OUT" numberOfTestsRun="0"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><block>2</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>10</index><block>1</block><killingTest>org.apache.commons.math.distribution.NormalDistributionTest.testInverseCumulativeProbabilityExtremes(org.apache.commons.math.distribution.NormalDistributionTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/distribution/NormalDistributionImpl::inverseCumulativeProbability</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>165</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>20</index><block>3</block><killingTest>org.apache.commons.math.distribution.NormalDistributionTest.testInverseCumulativeProbabilityExtremes(org.apache.commons.math.distribution.NormalDistributionTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/distribution/NormalDistributionImpl::inverseCumulativeProbability</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>167</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>26</index><block>5</block><killingTest>org.apache.commons.math.distribution.NormalDistributionTest.testMath280(org.apache.commons.math.distribution.NormalDistributionTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/distribution/NormalDistributionImpl::inverseCumulativeProbability</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>NormalDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.NormalDistributionImpl</mutatedClass><mutatedMethod>sample</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>10</index><block>1</block><killingTest>org.apache.commons.math.distribution.NormalDistributionTest.testSampling(org.apache.commons.math.distribution.NormalDistributionTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math/distribution/NormalDistributionImpl::sample</description></mutation>
</mutations>