<mutations>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(C)V</methodDescription><lineNumber>186</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><block>1</block><killingTest /><description>removed call to org/apache/commons/math/stat/Frequency::addValue</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><block>1</block><killingTest /><description>removed call to org/apache/commons/math/stat/Frequency::addValue</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><block>1</block><killingTest /><description>removed call to org/apache/commons/math/stat/Frequency::addValue</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>47</index><block>10</block><killingTest /><description>Replaced long addition with subtraction</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><block>5</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Integer;)V</methodDescription><lineNumber>168</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><block>2</block><killingTest /><description>removed call to org/apache/commons/math/stat/Frequency::addValue</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>113</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><block>1</block><killingTest /><description>removed call to org/apache/commons/math/stat/Frequency::addValue</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>clear</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>191</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><block>0</block><killingTest /><description>removed call to java/util/TreeMap::clear</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>578</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>580</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><block>2</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>582</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>22</index><block>4</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>585</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>36</index><block>6</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>586</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>41</index><block>7</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>588</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>53</index><block>10</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>579</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.BooleanFalseReturnValsMutator</mutator><index>9</index><block>1</block><killingTest /><description>replaced boolean return with false for org/apache/commons/math/stat/Frequency::equals</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>590</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.BooleanFalseReturnValsMutator</mutator><index>61</index><block>12</block><killingTest /><description>replaced boolean return with false for org/apache/commons/math/stat/Frequency::equals</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>581</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.BooleanTrueReturnValsMutator</mutator><index>17</index><block>3</block><killingTest /><description>replaced boolean return with true for org/apache/commons/math/stat/Frequency::equals</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>583</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.BooleanTrueReturnValsMutator</mutator><index>26</index><block>5</block><killingTest /><description>replaced boolean return with true for org/apache/commons/math/stat/Frequency::equals</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>587</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.BooleanTrueReturnValsMutator</mutator><index>45</index><block>8</block><killingTest /><description>replaced boolean return with true for org/apache/commons/math/stat/Frequency::equals</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>589</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.BooleanTrueReturnValsMutator</mutator><index>57</index><block>11</block><killingTest /><description>replaced boolean return with true for org/apache/commons/math/stat/Frequency::equals</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(C)J</methodDescription><lineNumber>286</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>7</index><block>2</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCount</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(I)J</methodDescription><lineNumber>266</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>8</index><block>2</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCount</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>276</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>7</index><block>2</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCount</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>244</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>250</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>29</index><block>5</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>245</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>13</index><block>3</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCount</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>256</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>44</index><block>10</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCount</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>233</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>7</index><block>1</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCount</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(C)J</methodDescription><lineNumber>456</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>7</index><block>2</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCumFreq</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(I)J</methodDescription><lineNumber>432</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>8</index><block>2</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCumFreq</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>7</index><block>2</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCumFreq</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>403</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>81</index><block>19</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>407</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>94</index><block>23</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>414</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>122</index><block>32</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>415</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>129</index><block>34</block><killingTest /><description>Replaced long addition with subtraction</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>382</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><block>1</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>385</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><block>3</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>389</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>34</index><block>8</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>396</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>57</index><block>12</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>403</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>81</index><block>19</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>407</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>94</index><block>23</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>412</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>109</index><block>29</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>414</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>122</index><block>32</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>386</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>24</index><block>6</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCumFreq</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>400</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>72</index><block>16</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCumFreq</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>408</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>99</index><block>25</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCumFreq</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>417</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>135</index><block>35</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCumFreq</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>420</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>142</index><block>37</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCumFreq</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Object;)J</methodDescription><lineNumber>369</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>7</index><block>1</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCumFreq</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(C)D</methodDescription><lineNumber>534</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>7</index><block>2</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/stat/Frequency::getCumPct</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>508</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>8</index><block>2</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/stat/Frequency::getCumPct</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>521</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>7</index><block>2</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/stat/Frequency::getCumPct</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>495</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>24</index><block>4</block><killingTest /><description>Replaced double division with multiplication</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>492</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><block>1</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>493</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>15</index><block>2</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/stat/Frequency::getCumPct</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>495</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>25</index><block>4</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/stat/Frequency::getCumPct</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>475</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>7</index><block>1</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/stat/Frequency::getCumPct</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(C)D</methodDescription><lineNumber>353</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>7</index><block>2</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/stat/Frequency::getPct</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>8</index><block>2</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/stat/Frequency::getPct</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>7</index><block>2</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/stat/Frequency::getPct</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>320</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>24</index><block>4</block><killingTest /><description>Replaced double division with multiplication</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>317</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><block>1</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>318</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>15</index><block>2</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/stat/Frequency::getPct</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>320</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>25</index><block>4</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/stat/Frequency::getPct</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>303</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>7</index><block>1</block><killingTest /><description>replaced double return with 0.0d for org/apache/commons/math/stat/Frequency::getPct</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>218</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>24</index><block>7</block><killingTest /><description>Replaced long addition with subtraction</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>217</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><block>4</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>220</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>30</index><block>8</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getSumFreq</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>570</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>13</index><block>0</block><killingTest /><description>Replaced integer multiplication with division</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>570</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>24</index><block>3</block><killingTest /><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>570</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>572</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>29</index><block>3</block><killingTest /><description>replaced int return with 0 for org/apache/commons/math/stat/Frequency::hashCode</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><block>7</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.EmptyObjectReturnValsMutator</mutator><index>100</index><block>24</block><killingTest /><description>replaced return value with "" for org/apache/commons/math/stat/Frequency::toString</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>valuesIterator</mutatedMethod><methodDescription>()Ljava/util/Iterator;</methodDescription><lineNumber>204</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><index>7</index><block>2</block><killingTest /><description>replaced return value with null for org/apache/commons/math/stat/Frequency::valuesIterator</description></mutation>
</mutations>