<mutations>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextBoolean</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>1</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextBoolean</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.BooleanTrueReturnValsMutator</mutator><index>12</index><block>4</block><killingTest /><description>replaced boolean return with true for org/apache/commons/math3/random/BitsStreamGenerator::nextBoolean</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextBytes</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>73</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>16</index><block>1</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextBytes</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>88</index><block>6</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextBytes</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>73</index><block>3</block><killingTest /><description>Changed increment from 4 to -4</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextBytes</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>83</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>93</index><block>7</block><killingTest /><description>Changed increment from 1 to -1</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextBytes</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>10</index><block>0</block><killingTest /><description>Replaced integer subtraction with addition</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextBytes</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>29</index><block>3</block><killingTest /><description>Replaced bitwise AND with OR</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextBytes</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>37</index><block>3</block><killingTest /><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextBytes</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>40</index><block>3</block><killingTest /><description>Replaced Shift Right with Shift Left</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextBytes</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>42</index><block>3</block><killingTest /><description>Replaced bitwise AND with OR</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextBytes</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>50</index><block>3</block><killingTest /><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextBytes</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>53</index><block>3</block><killingTest /><description>Replaced Shift Right with Shift Left</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextBytes</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>55</index><block>3</block><killingTest /><description>Replaced bitwise AND with OR</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextBytes</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>63</index><block>3</block><killingTest /><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextBytes</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>66</index><block>3</block><killingTest /><description>Replaced Shift Right with Shift Left</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextBytes</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>68</index><block>3</block><killingTest /><description>Replaced bitwise AND with OR</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextBytes</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>83</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>96</index><block>7</block><killingTest /><description>Replaced bitwise AND with OR</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextBytes</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>103</index><block>7</block><killingTest /><description>Replaced Shift Right with Shift Left</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextBytes</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>73</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><block>1</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextBytes</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>88</index><block>6</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="2"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>8</index><block>1</block><killingTest>org.apache.commons.math3.distribution.UniformRealDistributionTest.testSampling(org.apache.commons.math3.distribution.UniformRealDistributionTest)</killingTest><description>Replaced Shift Left with Shift Right</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="2"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>92</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>21</index><block>2</block><killingTest>org.apache.commons.math3.distribution.UniformRealDistributionTest.testSampling(org.apache.commons.math3.distribution.UniformRealDistributionTest)</killingTest><description>Replaced bitwise OR with AND</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>92</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>24</index><block>2</block><killingTest>org.apache.commons.math3.analysis.function.LogitTest.testValueWithInverseFunction(org.apache.commons.math3.analysis.function.LogitTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="2"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>92</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>25</index><block>2</block><killingTest>org.apache.commons.math3.distribution.UniformRealDistributionTest.testSampling(org.apache.commons.math3.distribution.UniformRealDistributionTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math3/random/BitsStreamGenerator::nextDouble</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextFloat</mutatedMethod><methodDescription>()F</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>8</index><block>1</block><killingTest /><description>Replaced float multiplication with division</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextFloat</mutatedMethod><methodDescription>()F</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>9</index><block>1</block><killingTest /><description>replaced float return with 0.0f for org/apache/commons/math3/random/BitsStreamGenerator::nextFloat</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>21</index><block>4</block><killingTest>org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testSampling(org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>28</index><block>5</block><killingTest>org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testSampling(org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>36</index><block>7</block><killingTest>org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testSampling(org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>44</index><block>8</block><killingTest>org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testSampling(org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>1</block><killingTest>org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testSampling(org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected="true" status="KILLED" numberOfTestsRun="1"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>118</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>62</index><block>10</block><killingTest>org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testSampling(org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest)</killingTest><description>replaced double return with 0.0d for org/apache/commons/math3/random/BitsStreamGenerator::nextGaussian</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextInt</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>6</index><block>1</block><killingTest /><description>replaced int return with 0 for org/apache/commons/math3/random/BitsStreamGenerator::nextInt</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextInt</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>4</index><block>0</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextInt</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>152</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>47</index><block>5</block><killingTest /><description>changed conditional boundary</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextInt</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>9</index><block>1</block><killingTest /><description>removed negation</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextInt</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>10</index><block>1</block><killingTest /><description>Replaced bitwise AND with OR</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextInt</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>21</index><block>3</block><killingTest /><description>Replaced long multiplication with division</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextInt</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>23</index><block>3</block><killingTest /><description>Replaced Shift Right with Shift Left</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextInt</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>151</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>36</index><block>5</block><killingTest /><description>Replaced integer modulus with multiplication</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextInt</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>152</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>42</index><block>5</block><killingTest /><description>Replaced integer subtraction with addition</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextInt</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>152</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>45</index><block>5</block><killingTest /><description>Replaced integer subtraction with addition</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextInt</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>152</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>46</index><block>5</block><killingTest /><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextInt</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>0</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextInt</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><block>1</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextInt</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>152</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>47</index><block>5</block><killingTest /><description>negated conditional</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextInt</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>25</index><block>3</block><killingTest /><description>replaced int return with 0 for org/apache/commons/math3/random/BitsStreamGenerator::nextInt</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextInt</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>51</index><block>6</block><killingTest /><description>replaced int return with 0 for org/apache/commons/math3/random/BitsStreamGenerator::nextInt</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextLong</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>160</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>8</index><block>1</block><killingTest /><description>Replaced Shift Left with Shift Right</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextLong</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>161</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>17</index><block>2</block><killingTest /><description>Replaced bitwise AND with OR</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextLong</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>23</index><block>2</block><killingTest /><description>Replaced bitwise OR with AND</description></mutation>
<mutation detected="false" status="NO_COVERAGE" numberOfTestsRun="0"><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextLong</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><index>24</index><block>2</block><killingTest /><description>replaced long return with 0 for org/apache/commons/math3/random/BitsStreamGenerator::nextLong</description></mutation>
</mutations>