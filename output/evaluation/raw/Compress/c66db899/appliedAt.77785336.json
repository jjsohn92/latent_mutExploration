{"37": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["in.close()", [21204, 21214]]]}, "38": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["inf.end()", [21256, 21265]]]}, "49": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [[">", [25289, 25290]]]}, "64": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["<", [26757, 26758]]]}, "73": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [[">", [28233, 28234]]]}, "74": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["count(buf.limit())", [28283, 28301]]]}, "78": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [[">", [37893, 37894]]]}, "83": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["==", [38473, 38475]]]}, "84": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["==", [38702, 38704]]]}, "127": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [[">=", [27857, 27859]]]}, "129": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [[">=", [27857, 27859]]]}, "147": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [[">>", [10025, 10027]]]}, "148": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["current.entry.setPlatform((versionMadeBy >> ZipFile.BYTE_SHIFT) & ZipFile.NIBLET_MASK)", [9984, 10070]]]}, "149": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["current.entry.setTime(time)", [10639, 10666]]]}, "150": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["current.entry.setStreamContiguous(true)", [12004, 12043]]]}, "204": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["b == ZipArchiveOutputStream.EOCD_SIG[0]", [40109, 40148]]]}, "223": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["!=", [15079, 15081]]]}, "224": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["!=", [15150, 15152]]]}, "249": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["pushedBackBytes(length)", [36241, 36264]]]}, "250": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["<", [16719, 16720]]]}, "251": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [[">", [16693, 16694]]]}, "252": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [[">=", [18186, 18188]]]}, "253": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["-", [16754, 16755]]]}, "254": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["current.crc.update(buffer, offset, read)", [18206, 18246]]]}, "278": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["current.entry.setCrc(val.getValue())", [28942, 28978]]]}, "279": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["current.entry.setCompressedSize(ZipLong.getValue(twoDwordBuf))", [29876, 29938]]]}, "296": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [[">", [20533, 20534]]]}, "312": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["!=", [39972, 39974]]]}, "313": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["count(1)", [39993, 40001]]]}, "329": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["<", [19188, 19189]]]}, "331": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["-", [19167, 19168]]]}, "332": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["-", [19303, 19304]]]}, "333": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["count(l)", [19025, 19033]]]}, "350": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [[">", [39398, 39399]]]}, "353": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["-", [39315, 39316]]]}, "354": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["==", [39452, 39454]]]}, "355": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["count(x)", [39523, 39531]]]}, "376": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [[">=", [21969, 21971]]]}, "377": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["<", [22034, 22035]]]}, "378": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [[">", [22164, 22165]]]}, "381": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["-", [22084, 22085]]]}, "382": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["+=", [22305, 22307]]]}, "383": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["skipped", [22254, 22261]]]}, "408": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["realSkip((long) entriesRead * CFH_LEN - LFH_LEN)", [37304, 37352]]]}, "409": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["realSkip(ZipShort.getValue(shortBuf))", [37538, 37575]]]}, "430": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["!entry.getGeneralPurposeBit().usesDataDescriptor()\n\n                || (allowStoredEntriesWithDataDescriptor && entry.getMethod() == ZipEntry.STORED)\n                || entry.getMethod() == ZipEntry.DEFLATED\n                || entry.getMethod() == ZipMethod.ENHANCED_DEFLATED.getCode()", [30600, 30885]]]}}