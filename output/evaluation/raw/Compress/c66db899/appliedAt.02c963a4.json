{"37": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["in.close()", [21745, 21755]]]}, "38": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["inf.end()", [21797, 21806]]]}, "49": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [[">", [25830, 25831]]]}, "64": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["<", [27298, 27299]]]}, "73": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [[">", [28774, 28775]]]}, "74": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["count(buf.limit())", [28824, 28842]]]}, "78": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [[">", [38434, 38435]]]}, "83": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["==", [39014, 39016]]]}, "84": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["==", [39243, 39245]]]}, "127": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [[">=", [28398, 28400]]]}, "129": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [[">=", [28398, 28400]]]}, "147": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [[">>", [10249, 10251]]]}, "148": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["current.entry.setPlatform((versionMadeBy >> ZipFile.BYTE_SHIFT) & ZipFile.NIBLET_MASK)", [10208, 10294]]]}, "149": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["current.entry.setTime(time)", [10863, 10890]]]}, "150": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["current.entry.setStreamContiguous(true)", [12228, 12267]]]}, "204": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["b == ZipArchiveOutputStream.EOCD_SIG[0]", [40650, 40689]]]}, "223": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["!=", [15303, 15305]]]}, "224": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["!=", [15374, 15376]]]}, "249": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["pushedBackBytes(length)", [36782, 36805]]]}, "250": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["<", [16943, 16944]]]}, "251": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [[">", [16917, 16918]]]}, "252": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [[">=", [18410, 18412]]]}, "253": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["-", [16978, 16979]]]}, "254": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["current.crc.update(buffer, offset, read)", [18430, 18470]]]}, "278": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["current.entry.setCrc(val.getValue())", [29483, 29519]]]}, "279": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["current.entry.setCompressedSize(ZipLong.getValue(twoDwordBuf))", [30417, 30479]]]}, "296": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [[">", [21074, 21075]]]}, "312": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["!=", [40513, 40515]]]}, "313": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["count(1)", [40534, 40542]]]}, "329": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["<", [19729, 19730]]]}, "331": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["-", [19708, 19709]]]}, "332": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["-", [19844, 19845]]]}, "333": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["count(l)", [19566, 19574]]]}, "350": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [[">", [39939, 39940]]]}, "353": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["-", [39856, 39857]]]}, "354": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["==", [39993, 39995]]]}, "355": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["count(x)", [40064, 40072]]]}, "376": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [[">=", [22510, 22512]]]}, "377": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["<", [22575, 22576]]]}, "378": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [[">", [22705, 22706]]]}, "381": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["-", [22625, 22626]]]}, "382": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["+=", [22846, 22848]]]}, "383": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["skipped", [22795, 22802]]]}, "408": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["realSkip((long) entriesRead * CFH_LEN - LFH_LEN)", [37845, 37893]]]}, "409": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["realSkip(ZipShort.getValue(shortBuf))", [38079, 38116]]]}, "430": {"src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": [["!entry.getGeneralPurposeBit().usesDataDescriptor()\n\n                || (allowStoredEntriesWithDataDescriptor && entry.getMethod() == ZipEntry.STORED)\n                || entry.getMethod() == ZipEntry.DEFLATED\n                || entry.getMethod() == ZipMethod.ENHANCED_DEFLATED.getCode()", [31141, 31426]]]}}