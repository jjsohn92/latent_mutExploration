{"2": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [[">", [48113, 48114]]]}, "22": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["Preconditions.checkState(isFoldableExpressBlock(n))", [25364, 25415]]]}, "23": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["Preconditions.checkState(isReturnExpressBlock(n))", [26555, 26604]]]}, "24": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["Preconditions.checkState(isVarBlock(n))", [27147, 27186]]]}, "35": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["NodeUtil.has(n, isPropertyAssignmentInExpressionPredicate,\n        DONT_TRAVERSE_FUNCTIONS_PREDICATE)", [29263, 29364]]]}, "41": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["first.hasOneChild()", [26998, 27017]]]}, "61": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["!=", [3754, 3756]]]}, "63": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["node", [3261, 3265]]]}, "64": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["node", [3788, 3792]]]}, "75": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["Preconditions.checkArgument(n.getType() == Token.CALL\n        || n.getType() == Token.NEW)", [38623, 38713]]]}, "77": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["newLiteralNode", [40269, 40283]]]}, "78": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["n", [40320, 40321]]]}, "91": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["<", [42399, 42400]]]}, "93": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["n", [43464, 43465]]]}, "94": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["n", [42038, 42039]]]}, "95": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["n", [42038, 42039]]]}, "96": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["regexLiteral", [43662, 43674]]]}, "97": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["n", [43380, 43381]]]}, "111": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["Preconditions.checkState(n.getType() == Token.NEW)", [37875, 37925]]]}, "122": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["reportCodeChange()", [32591, 32609]]]}, "123": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["newRoot", [32752, 32759]]]}, "124": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["n", [36523, 36524]]]}, "147": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["n", [14629, 14630]]]}, "148": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["newExpr", [15252, 15259]]]}, "149": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["newExpr", [16060, 16067]]]}, "150": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["n", [17757, 17758]]]}, "151": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["returnNode", [18555, 18565]]]}, "152": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["expr", [20137, 20141]]]}, "153": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["expr", [20552, 20556]]]}, "155": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["var", [21637, 21640]]]}, "156": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["var", [22622, 22625]]]}, "201": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["newOperator", [13750, 13761]]]}, "207": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["n", [9864, 9865]]]}, "252": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["Preconditions.checkState(n.getType() == Token.IF)", [23055, 23104]]]}}