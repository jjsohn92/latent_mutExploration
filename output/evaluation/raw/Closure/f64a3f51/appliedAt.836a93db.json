{"2": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [[">", [48125, 48126]]]}, "22": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["Preconditions.checkState(isFoldableExpressBlock(n))", [25376, 25427]]]}, "23": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["Preconditions.checkState(isReturnExpressBlock(n))", [26567, 26616]]]}, "24": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["Preconditions.checkState(isVarBlock(n))", [27159, 27198]]]}, "35": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["NodeUtil.has(n, isPropertyAssignmentInExpressionPredicate,\n        DONT_TRAVERSE_FUNCTIONS_PREDICATE)", [29275, 29376]]]}, "41": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["first.hasOneChild()", [27010, 27029]]]}, "61": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["!=", [3754, 3756]]]}, "63": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["node", [3261, 3265]]]}, "64": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["node", [3788, 3792]]]}, "75": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["Preconditions.checkArgument(n.getType() == Token.CALL\n        || n.getType() == Token.NEW)", [38635, 38725]]]}, "77": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["newLiteralNode", [40281, 40295]]]}, "78": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["n", [40332, 40333]]]}, "91": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["<", [42411, 42412]]]}, "93": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["n", [43476, 43477]]]}, "94": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["n", [42050, 42051]]]}, "95": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["n", [42050, 42051]]]}, "96": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["regexLiteral", [43674, 43686]]]}, "97": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["n", [43392, 43393]]]}, "111": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["Preconditions.checkState(n.getType() == Token.NEW)", [37887, 37937]]]}, "122": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["reportCodeChange()", [32603, 32621]]]}, "123": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["newRoot", [32764, 32771]]]}, "124": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["n", [36535, 36536]]]}, "147": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["n", [14641, 14642]]]}, "148": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["newExpr", [15264, 15271]]]}, "149": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["newExpr", [16072, 16079]]]}, "150": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["n", [17769, 17770]]]}, "151": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["returnNode", [18567, 18577]]]}, "152": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["expr", [20149, 20153]]]}, "153": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["expr", [20564, 20568]]]}, "155": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["var", [21649, 21652]]]}, "156": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["var", [22634, 22637]]]}, "201": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["newOperator", [13762, 13773]]]}, "207": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["n", [9876, 9877]]]}, "252": {"src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java": [["Preconditions.checkState(n.getType() == Token.IF)", [23067, 23116]]]}}